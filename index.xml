<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rahul Nair</title>
    <link>https://rahulnair23.github.io/</link>
      <atom:link href="https://rahulnair23.github.io/index.xml" rel="self" type="application/rss+xml" />
    <description>Rahul Nair</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Thu, 20 Aug 2020 13:16:40 +0100</lastBuildDate>
    <image>
      <url>https://rahulnair23.github.io/images/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_2.png</url>
      <title>Rahul Nair</title>
      <link>https://rahulnair23.github.io/</link>
    </image>
    
    <item>
      <title>Oh Python</title>
      <link>https://rahulnair23.github.io/post/oh-python/</link>
      <pubDate>Thu, 20 Aug 2020 13:16:40 +0100</pubDate>
      <guid>https://rahulnair23.github.io/post/oh-python/</guid>
      <description>&lt;p&gt;Suppose you have a list of objects that you need to iterate over two consecutive items at a time.&lt;/p&gt;
&lt;p&gt;An old 
&lt;a href=&#34;https://stackoverflow.com/questions/16789776/iterating-over-two-values-of-a-list-at-a-time-in-python&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;stackoverflow&lt;/a&gt; question for this leads to the a quote from the 
&lt;a href=&#34;https://docs.python.org/2/library/functions.html#zip&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;documentation&lt;/a&gt; that reads:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This makes possible an idiom for clustering a data series into n-length groups using &lt;code&gt;zip(*[iter(s)]*n)&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So the solution would be:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-(python)&#34;&gt;k = [1, 2, 3, 4, 5, 6]
list(zip(*[iter(k)]*2))
# [(1, 2), (3, 4), (5, 6)]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That is cryptic! Let&amp;rsquo;s break it down to understand why this works.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Let&amp;rsquo;s start with the inner most bit. &lt;code&gt;iter&lt;/code&gt; simply returns an iterator object. For lists we would normally just write &lt;code&gt;for x in alist&lt;/code&gt; to iterate over the list, but under the hood an iterator is defined with each loop fetching the next item using a &lt;code&gt;next&lt;/code&gt; call.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-(python)&#34;&gt;&amp;gt;&amp;gt;&amp;gt; iter(k)
&amp;lt;list_iterator object at 0x7fcf654c9f28&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Next we consider &lt;code&gt;[iter(k)]*2&lt;/code&gt; - the multiplication here creates a shallow copy of the list.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-(python)&#34;&gt;&amp;gt;&amp;gt;&amp;gt; [iter(k)] * 2
[&amp;lt;list_iterator object at 0x7fcf654c9f28&amp;gt;, &amp;lt;list_iterator object at 0x7fcf654c9f28&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;The star operator &lt;code&gt;*&lt;/code&gt; then unpacks the collection as positional arguments to a function which is &lt;code&gt;zip&lt;/code&gt; in this case. &lt;code&gt;zip&lt;/code&gt; is a handy tool to merge several iterable together.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-(python)&#34;&gt;&amp;gt;&amp;gt;&amp;gt; zip(*[iter(k)] * 2)
&amp;lt;zip object at 0x7fcf654de808&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;Finally, the &lt;code&gt;list&lt;/code&gt; operator just runs through to generate the entire list, giving us the desired output.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-(python)&#34;&gt;&amp;gt;&amp;gt;&amp;gt; list(zip(*[iter(k)] * 2))
[(1, 2), (3, 4), (5, 6)]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What&amp;rsquo;s strange about all this is that it depends on subtle behaviours of the underlying methods. For example, instead of &lt;code&gt;zip(*[iter(k)] * 2)&lt;/code&gt; you wrote &lt;code&gt;list(zip(*[iter(k), iter(k)]))&lt;/code&gt;. You will end up with a different result. The solution depends on the iterators being a shallow copy! Each time any of the iterator is hit, it calls the &lt;code&gt;next&lt;/code&gt; call to the function.&lt;/p&gt;
&lt;h3 id=&#34;show-dont-tell&#34;&gt;Show, don&amp;rsquo;t tell&lt;/h3&gt;
&lt;p&gt;I&amp;rsquo;d hate to encounter snippets like this in the wild as it places significant cognitive load on people trying to read this. Strange it was included in the official 2.x documentation, thankfully removed from the current versions.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Urban parks</title>
      <link>https://rahulnair23.github.io/post/on-parks/</link>
      <pubDate>Wed, 08 Jul 2020 20:53:17 +0100</pubDate>
      <guid>https://rahulnair23.github.io/post/on-parks/</guid>
      <description>&lt;p&gt;A 4.2 kilometre road cuts the 2000 acres of Phoenix Park neatly in half. Chesterfield Avenue doesn&amp;rsquo;t have a single pedestrian crossing, yield sign, or any amenity that isn&amp;rsquo;t designed for the car. During regular times, two lanes for the entire length serve as a parking lot. Throughout the park, pedestrians and cyclists have to stop and yield to passing cars. Its a strange hierarchy of movement to have within a park.&lt;/p&gt;
&lt;p&gt;A pandemic-induced change saw the Office of Public Works (OPW) designate two lanes as cycle-only and closure of peripheral gates to vehicles - both steps that brought some measure of traffic calm. The new minister, in opposition to his own department by all accounts, reversed one of these decisions and so its back being a thoroughfare.&lt;/p&gt;
&lt;p&gt;In all their public communication on why that is, a theme that stands out is their consideration for &amp;ldquo;An Garda Síochána and other key stakeholders&amp;rdquo;. In addition to being the largest walled park in Europe, the park is also home to several institutions. The residence of the Irish president and the U.S. Ambassador, the police headquarters, a hospital, a school, the zoo, cricket clubs, a polo ground, a visitor&amp;rsquo;s center, a nursing home, the Ordinance Survey of Ireland, several gatekeeper houses - some vacant, and a disused fort.&lt;/p&gt;
&lt;p&gt;So OPW, it would seem in public, is balancing institutional needs with those of the general public. All this takes me to another place and another time.&lt;/p&gt;
&lt;h2 id=&#34;the-peoples-park&#34;&gt;The People&amp;rsquo;s Park&lt;/h2&gt;
&lt;p&gt;Hot and humid air welcome those arriving at Chennai Terminal train station. As transit planners the world over have trouble connecting dots, the nearest suburban train station is a short trek away in Park Station. For a long time, it was a bit of mystery to me why it was called Park Station as all around it was concrete and asphalt.&lt;/p&gt;
&lt;iframe src=&#34;https://www.google.com/maps/embed?pb=!1m14!1m12!1m3!1d5254.7315661370585!2d80.27334477319604!3d13.0835764087889!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!5e0!3m2!1sen!2sie!4v1594282643148!5m2!1sen!2sie&#34; width=&#34;700&#34; height=&#34;350&#34; frameborder=&#34;0&#34; style=&#34;border:0;&#34; allowfullscreen=&#34;&#34; aria-hidden=&#34;false&#34; tabindex=&#34;0&#34;&gt;&lt;/iframe&gt;
&lt;p&gt;That sector of Chennai was the centre of British colonial power who built Fort St. George around the corner. So not to different from Phoenix park really. It was smaller of course, a mere tenth of its Dublin cousin.&lt;/p&gt;
&lt;p&gt;What started in 1859 as a 
&lt;a href=&#34;https://en.wikipedia.org/wiki/People%27s_Park,_Chennai&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;22 acre park&lt;/a&gt; with several ponds and green spaces, slowly morphed in the century to follow. It grew to be as large as 112 acres at one point. The city council took over the park in 1866. Several acres were carved out in 1886 for the Victoria Public Hall - built to commemorate Queen Victoria&amp;rsquo;s golden jubilee.&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-the-victoria-public-hall-that-was-built-on-the-park-1888-sourcehttpscommonswikimediaorgwikifilevictoria_public_hall_chennaijpg&#34;&gt;



  &lt;img data-src=&#34;https://rahulnair23.github.io/post/on-parks/Victoria_Public_Hall,_Chennai_hue152d97b2aa3653a28b5e2e6b48ee7aa_3278914_2000x2000_fit_q90_lanczos.JPG&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;400&#34; height=&#34;2304&#34;&gt;



  
  
  &lt;figcaption&gt;
    The Victoria Public Hall that was built on the park ~1888 &lt;a href=&#34;https://commons.wikimedia.org/wiki/File:Victoria_Public_Hall,_Chennai.JPG&#34;&gt;(source)&lt;/a&gt;
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;Then there were stadiums and sports clubs followed by a 
&lt;a href=&#34;https://www.thehindu.com/news/cities/chennai/the-fire-that-changed-the-face-of-chennai-central/article7272827.ece&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;convenient fire&lt;/a&gt; in 1985 that was the final nail. The small part of the park that does remain is virtually inaccessible by the public and in 
&lt;a href=&#34;https://www.thehindu.com/todays-paper/tp-national/tp-tamilnadu/a-horticulturists-delight-a-picture-of-neglect-now/article27318169.ece&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;neglect&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So there you have it - a train station named after something that no longer exists. A cautionary tale on when government agencies serve each other rather than the general public. For Dublin, one can only hope that the 14 kilometre wall that keeps the deer in, keeps institutional needs out.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Model explanations via column generation</title>
      <link>https://rahulnair23.github.io/post/boolean-rules/</link>
      <pubDate>Tue, 16 Jun 2020 10:46:12 +0100</pubDate>
      <guid>https://rahulnair23.github.io/post/boolean-rules/</guid>
      <description>&lt;p&gt;In this post, I&amp;rsquo;ll review a paper from 2018 that deals with generating boolean decision rules and uses column generation. The 
&lt;a href=&#34;https://dl.acm.org/doi/10.5555/3327345.3327376&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;paper&lt;/a&gt; is well worth the read if you are interested in explainable AI models. The work also won the 
&lt;a href=&#34;https://community.fico.com/s/explainable-machine-learning-challenge&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;FICO explainability challenge&lt;/a&gt; by applying this method to data from the financial services sector.&lt;/p&gt;
&lt;h1 id=&#34;setting&#34;&gt;Setting&lt;/h1&gt;
&lt;p&gt;Algorithmic decisions - ones where you rely on machines to reach a conclusion - require justification. Why was my loan approval denied? Why was the scan result classified as cancerous? In these and several other critical sectors, simply stating the prediction of a AI system is not enough. The underlying rationale of &amp;ldquo;why&amp;rdquo; is equally important.&lt;/p&gt;
&lt;p&gt;Several methods seek to come up with the justification algorithmically (in a field called Explainable AI) and several methods exist that can be distinguished along several dimensions. The main one is scope. The &lt;em&gt;global&lt;/em&gt; methods look to explain the entire model, i.e. how does the model behave? This contrasts with &lt;em&gt;local&lt;/em&gt; methods that look to explain a single instance, i.e. why was my loan not approved?&lt;/p&gt;
&lt;p&gt;When the models are complex, as is often the case, a popular class of methods are surrogate models. The basic goal here is to build a simpler (e.g. linear) version of a complex model, then look to interpret the simpler model in ways we humans can understand. When built for &lt;em&gt;local&lt;/em&gt; explanations, these probe the neighborhood of test instance to build a surrogate of the complex model.&lt;/p&gt;
&lt;p&gt;Unfortunately, it is hard to be objective when it comes to explanations. In practice, different methods will result in vastly different explanations for the same instance on the same underlying (complex) model. For minor changes in training samples or an adjustment of parameters, even the same method can give you very different results. Fundamentally, these approaches are limited by design. If you prescribe to the view that a machine learning (ML) model is all but a lossy compressed view on the data, then surrogate models are a lossy compressed view of the ML model. Significant challenges remain in practical deployments.&lt;/p&gt;
&lt;p&gt;An alternative view, the one described in the paper, is one where the model is directly interpretable. A directly interpretable model is one that can be understood by humans. There are of course, several models like decision trees that fall in this category.&lt;/p&gt;
&lt;h1 id=&#34;the-problem&#34;&gt;The problem&lt;/h1&gt;
&lt;p&gt;Consider a supervised binary classification task. You are given $(X_i, y_i)$ for observations $i = 1,&amp;hellip;, n$, where $X_i$ is the set of features associated with observation $i$ and $y_i$ is the binary outcome label. The task is to build a boolean classifier $\hat{y}(\mathbf{x})$ that can be stated as&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if (condition) then (predict True) else (predict False)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;where &lt;code&gt;(condition)&lt;/code&gt; is of a specific form called a Disjunctive Normal Form (DNF). DNF clauses are OR of ANDs. A DNF clause on when to drink beer would be &lt;code&gt;(mood=HAPPY AND inventory&amp;gt;0) OR (mood=SAD AND inventory&amp;gt;0) OR (temp&amp;gt;15°C)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For a dataset there are exponentially many such clauses involving its features. The challenge is to find a relatively compact subset that provides the best prediction accuracy. The condition needs to be compact as overly complex clauses are not interpretable.&lt;/p&gt;
&lt;h1 id=&#34;the-model&#34;&gt;The model&lt;/h1&gt;
&lt;p&gt;The 
&lt;a href=&#34;https://dl.acm.org/doi/10.5555/3327345.3327376&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;paper&lt;/a&gt; formulates the search for these clauses as a mixed-integer programming problem.&lt;/p&gt;
&lt;p&gt;$P$ denotes the set of positive samples, i.e. the observations where $y_i = 1$ and $Z$ denote negative ones. All features in $X_i$ are assumed to be binary valued. This isn&amp;rsquo;t too restrictive, continuous and categorical data can be encoded this way.  There is $K$ a set of (exponentially many) clauses involving features of $X$ and $K_i, K_i\subseteq K$ is the subset of clauses satisfied by observation $i$.&lt;/p&gt;
&lt;p&gt;There are two decision variables. First is $w_k$ (for all $k$ in set $K$) - a binary variable on if clause $k$ is selected for the model. Each clause $k$ in $K$ has an associated complexity $c_k$. The second is $\xi_i$ defined for $i \in P$ (i.e. for all positive samples) denotes all samples that are classified incorrectly.&lt;/p&gt;
&lt;p&gt;The objective looks to minimize Hamming loss which is the fraction of misclassified samples. Specifically, this can be written as&lt;/p&gt;
&lt;p&gt;$$
\min_{\xi, w} \color{blue}\underbrace{\color{black}\sum_{i\in P} \xi_i}_{\text{false negatives}} {\color{black}+}
\color{blue}\underbrace{\color{black}\sum_{i\in Z}\sum_{k\in K_i} w_k}_{\text{false positives}}
$$&lt;/p&gt;
&lt;p&gt;False positives add more than &amp;ldquo;one unit&amp;rdquo; if multiple clauses are satisfied. This is&lt;/p&gt;
&lt;p&gt;$$\begin{aligned}
\mbox{s.t.} \qquad &amp;amp; \xi_i + \sum_{k\in K_i} w_k \ge 1 \qquad \xi_i \ge 0, \qquad i\in P \\&lt;br&gt;
&amp;amp; \sum_{k\in K} c_k w_k \le C \\&lt;br&gt;
&amp;amp; w_k \in \{0, 1\} \qquad \forall k\in K
\end{aligned}
$$&lt;/p&gt;
&lt;p&gt;The first constraint looks to identify false negatives. It basically says, for each positive sample, either chalk up a false negative ($\xi_i$) or include a rule that correctly represents this observation (i.e. a clause from the set $K_i$). The second constraint simply bounds the total complexity of the selected rule set to a parameter $C$.&lt;/p&gt;
&lt;p&gt;The overall problem still remains however, the set $K$ is very large and we&amp;rsquo;d like to avoid having to generate the entire set. This mainly because, it is expensive to generate and solve for all $K$. In any case, only a few $w_k$ will be selected in the final solution, so it makes sense to only look at clauses as needed.&lt;/p&gt;
&lt;p&gt;In the maximum clique 
&lt;a href=&#34;../max-clique&#34;&gt;post&lt;/a&gt; earlier, this type of exponential growth was addressed using constraint generation. In this work, they follow a column generation procedure - one of generating new variables ($w_k$) as needed. Adding rows and columns to a optimization program are strongly coupled topics. Adding a constraint (row) to a program is  the same as adding a variable (column) to its dual.&lt;/p&gt;
&lt;h2 id=&#34;the-pricing-problem&#34;&gt;The pricing problem&lt;/h2&gt;
&lt;p&gt;Now to the problem of generating new conjunctive clauses. The sub-problem looks to find the missing clause with the highest reduced cost, i.e. the clause that has the greatest impact on the objective function. This is a heuristic selection and you may have to undo a selection at a later step. But if no missing clause with a negative reduced cost can be found, the procedure terminates with the optimal solution.&lt;/p&gt;
&lt;p&gt;A bit more notation. From the program above, take $\mu_i$ to be the dual variables associated with the first constraint, and $\lambda$ be the dual variable for the complexity constraint. Define two sets of decision variables $\delta_i$ for all observations $i$ and $z_j$ if feature $j\in J$ is selected in missing constraint. Additionally denote $S_i$ to be a set of zero valued features for sample $i$.&lt;/p&gt;
&lt;p&gt;Armed with this, the sub-problem to identify a clause to include (with the greatest negative reduce cost) can be formulated as:&lt;/p&gt;
&lt;p&gt;$$
\min_{\delta, z} \color{blue}\underbrace{\color{black}\lambda\left(1+\sum_{j\in J}z_j\right)}_{\substack{\text{complexity of new rule}\\\text{in terms of features selected}}} {\color{black}-}
\color{blue}\underbrace{\color{black}\sum_{i\in P} \mu_i \delta_i}_{\substack{\text{how much the new rule}\\\text{improves false negatives}}}{\color{black}+}
\color{blue}\underbrace{\color{black}\sum_{i\in Z} \delta_i}_{\substack{\text{how much the new rule}\\\text{hurts false positives}}}
$$&lt;/p&gt;
&lt;p&gt;$$\begin{aligned}
\mbox{s.t.} \qquad &amp;amp; \delta_i + z_j\le 1 \qquad j\in S_i, \qquad i\in P \\&lt;br&gt;
&amp;amp;  \delta_i \ge 1- \sum_{j\in S_i} z_j \qquad \delta_i\ge 0 \qquad i\in Z\\&lt;br&gt;
&amp;amp; \sum_{j\in J} z_j \le D \\&lt;br&gt;
&amp;amp; z_j \in \{0, 1\} \qquad \forall j\in J
\end{aligned}
$$&lt;/p&gt;
&lt;p&gt;The first constraint here says every zero-valued feature in every positive sample - the feature is either selected or the sample satisfies the clause. The next constraint states that the $i$-th negative sample is covered only if no zero-valued feature is selected. The next constraint bounds the complexity and the feature selection variables are restricted to be binary.&lt;/p&gt;
&lt;h2 id=&#34;conclusions&#34;&gt;Conclusions&lt;/h2&gt;
&lt;p&gt;The method appears to be well suited for transactional-type data, where there are some underlying rules (e.g. a business process) that generates the training data. I leave you with an interesting example. The tic-tac-toe 
&lt;a href=&#34;https://archive.ics.uci.edu/ml/datasets/Tic-Tac-Toe&amp;#43;Endgame&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;dataset&lt;/a&gt; contains all possible board configurations at the end of a 
&lt;a href=&#34;https://en.wikipedia.org/wiki/Tic-tac-toe&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;tic-tac-toe game&lt;/a&gt; and the outcome (if &lt;code&gt;x&lt;/code&gt; won or not). The method extracts almost all the rules of the game based on just this data, just missing the diagonal cases. Some of the rules extracted are superfluous.&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-rules-extracted-from-tic-tac-toe-data&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://rahulnair23.github.io/post/boolean-rules/tictactoe_hu1ec8a325d060e5397d7307828d9e84ef_98406_2000x2000_fit_q90_lanczos.jpg&#34; data-caption=&#34;Rules extracted from tic-tac-toe data&#34;&gt;


  &lt;img data-src=&#34;https://rahulnair23.github.io/post/boolean-rules/tictactoe_hu1ec8a325d060e5397d7307828d9e84ef_98406_2000x2000_fit_q90_lanczos.jpg&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;1270&#34; height=&#34;618&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Rules extracted from tic-tac-toe data
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;As with all things, the approach comes with some limitations. There is a complexity-accuracy tradeoff, expect classifier accuracy to drop. Although in my experiments this was not substantial. The clauses generated are sensitive to the parameter $C$. If you don&amp;rsquo;t have a mechanism to validate the rule set then it is difficult to tune. The method doesn&amp;rsquo;t deal with class-imbalance, so you would need to under/over-sample to get a balanced sample. It would also worthwhile to study clauses generated in the presence of highly correlated features. I expect one of the correlated features to be picked arbitrarily.&lt;/p&gt;
&lt;h1 id=&#34;resources&#34;&gt;Resources&lt;/h1&gt;
&lt;p&gt;A modified implementation of the model is available through the 
&lt;a href=&#34;https://github.com/IBM/AIX360/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;AIX360&lt;/a&gt; toolkit, so you can try it yourself. The differences are documented in another 
&lt;a href=&#34;https://arxiv.org/pdf/1909.03012.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;paper&lt;/a&gt;. Mainly, it uses a beam search heuristic instead of the pricing problem. Additionally, the complexity clauses are handled through two regularization terms, rather than a constraint.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Maximum weighted cliques in a graph</title>
      <link>https://rahulnair23.github.io/post/max-clique/</link>
      <pubDate>Fri, 05 Jun 2020 10:44:59 +0100</pubDate>
      <guid>https://rahulnair23.github.io/post/max-clique/</guid>
      <description>&lt;p&gt;Recently, I had the need to compute maximum weighted cliques on very dense large graphs. This is a well studied problem, and a nice 
&lt;a href=&#34;https://doi.org/10.1007/BF01098364&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;survey paper&lt;/a&gt; from 90&amp;rsquo;s by Pardalos and Xue gives a good overview of approaches.&lt;/p&gt;
&lt;h2 id=&#34;the-problem&#34;&gt;The problem&lt;/h2&gt;
&lt;p&gt;We are given a graph $G = (V, E)$ which is a set of vertices $V$ and edges $E$. Each vertex has an associated weight $d_i, \forall i\in V$. A &lt;em&gt;clique&lt;/em&gt; $C$ is a subset of vertices, where all vertices are pairwise connected. A &lt;em&gt;maximum&lt;/em&gt; clique is a clique that has largest weight.&lt;/p&gt;
&lt;p&gt;A related notion is of an &lt;em&gt;independent set&lt;/em&gt;, which is a subset of vertices $V$ that are pairwise disconnected. A maximum independent set is similarly an independent set with the largest weight.&lt;/p&gt;
&lt;h2 id=&#34;solutions&#34;&gt;Solutions&lt;/h2&gt;
&lt;p&gt;For general graphs, finding the maximum cliques is a hard problem (NP-complete). An integer programming approach that involves edges can be written as:&lt;/p&gt;
&lt;p&gt;$$\begin{aligned}
\max_x &amp;amp; \sum_{i\in V} d_i x_{i}\\&lt;br&gt;
\mbox{s.t.} \qquad &amp;amp; x_i + x_j \le 1 \quad \forall (i, j) \in \bar{E} \\&lt;br&gt;
&amp;amp; x_i \in {0, 1} \qquad \forall i\in V
\end{aligned}
$$&lt;/p&gt;
&lt;p&gt;where $\bar{E}$ is called the complement edge set that is a set of edges that are missing from the original graph $G$. All the constraint $x_i + x_j \le 1$ says is if the edge $(i, j)$ is missing then only one node, either $i$ or $j$, can be in the clique. The objective seeks to maximize the weighted of selected nodes.&lt;/p&gt;
&lt;p&gt;As pointed out in the 
&lt;a href=&#34;https://doi.org/10.1007/BF01098364&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;paper&lt;/a&gt; this formulation isn&amp;rsquo;t useful in practice on account of two problems. First, the linear relaxation, one where the integrality constraints $x_i \in {0, 1}$ is omitted, gives a poor bound. The second is on account of symmetry. Symmetry arises in this context as vertices with the same weight are indistinguishable. So several configurations result in the same optimal solution. Why is this bad? The branch and cut tree cannot prune the search tree as solutions are in various parts of it. One way to remove symmetry is to do lexicographical ordering. An arbitrary order is imposed via additional constraints that cuts of several optimal solutions knowing that at least one optimal solution is valid. There are other methods as well, such as 
&lt;a href=&#34;https://doi.org/10.1007/s10107-002-0358-2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;isomorphic pruning&lt;/a&gt;, and 
&lt;a href=&#34;https://doi.org/10.1016/j.disopt.2011.07.001&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;orbitopal fixing&lt;/a&gt;, but we won&amp;rsquo;t get into those here.&lt;/p&gt;
&lt;h2 id=&#34;an-alternative-formulation&#34;&gt;An alternative formulation&lt;/h2&gt;
&lt;p&gt;The notion of the complement edge set $\bar{E}$ can be strengthened using independent sets. If you know an independent set, a clique can contain at most one vertex from such a set. To write this as a constraint, one would need to consider &lt;em&gt;maximum&lt;/em&gt; independent sets, lest you allow the omitted vertices to be included in the clique. Further, you would need to look at all maximum independent sets that arise in $G$. Assume for a moment that the set of maximum independent sets $\mathbb{S}$ is known. Then the problem of finding the maximum weighted clique can be written as&lt;/p&gt;
&lt;p&gt;$$\begin{aligned}
\max_x &amp;amp; \sum_{i\in V} d_i x_{i}\\&lt;br&gt;
\mbox{s.t.} \qquad &amp;amp; \sum_{i\in I} x_i \le 1 \quad \forall I \in \mathbb{S} \\&lt;br&gt;
&amp;amp; x_i \in {0, 1} \qquad \forall i\in V
\end{aligned}
$$&lt;/p&gt;
&lt;p&gt;The objective is the same as before - maximize the total weight of selected nodes. The constraints, one for each maximum independent set, allows only one vertex into the solution. The constraints are tighter than the previous formulation implying that the linear relaxation gives a better bound. For some classes of graphs, namely perfect graphs, omitting the integrality constraints will directly give you integral solutions! The problem however is that there are now an exponential number of constraints (set $\mathbb{S}$ is very large).&lt;/p&gt;
&lt;p&gt;One mechanism to deal with too many constraints is use lazy constraints. The idea is to start the optimization with a small set of constraints and then add &lt;em&gt;relevant&lt;/em&gt; constraints from the large pool as you go along. The prerequisite is however that such relevant constraints can be generated efficiently.&lt;/p&gt;
&lt;p&gt;How would this work? A sketch of the solution algorithm looks like this.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Use a heuristic procedure to generate a set of maximum independent sets ($S$)&lt;/li&gt;
&lt;li&gt;Solve a linear relaxation on this limited set ($S \subseteq \mathbb{S}$)&lt;/li&gt;
&lt;li&gt;Based on solution, identify new maximum independent sets that would cut the current solution&lt;/li&gt;
&lt;li&gt;If no such sets exists, we are done (current solution gives the maximum weighted clique)&lt;/li&gt;
&lt;li&gt;If there are, then add to the constraints and goto step 2.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;reference-implementation&#34;&gt;Reference implementation&lt;/h2&gt;
&lt;p&gt;To test this, we use the &lt;code&gt;networkx&lt;/code&gt; library for graphs and the CPLEX solver. We use one of the many generators for a test graph with a known number of cliques.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from networkx import nx
G = nx.generators.ring_of_cliques(6, 3)
nx.draw(G, with_labels=True)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;gives you this:&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-an-test-graph-with-known-max-cliques&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://rahulnair23.github.io/post/max-clique/graph_hu66fa372f34c55a7f200bf8e44ac04457_35825_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;An test graph with known max cliques&#34;&gt;


  &lt;img data-src=&#34;https://rahulnair23.github.io/post/max-clique/graph_hu66fa372f34c55a7f200bf8e44ac04457_35825_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;640&#34; height=&#34;480&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    An test graph with known max cliques
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;h4 id=&#34;step-1-generating-maximum-independent-sets&#34;&gt;(Step 1) Generating maximum independent sets&lt;/h4&gt;
&lt;p&gt;Here we use the greedy heuristic implementation as shown in this 
&lt;a href=&#34;https://kmutya.github.io/maxclique/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;blog&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def greedy_init(G):
    &amp;quot;&amp;quot;&amp;quot;
    https://kmutya.github.io/maxclique/
    &amp;quot;&amp;quot;&amp;quot;
    n = G.number_of_nodes()  # Storing total number of nodes in &#39;n&#39;
    max_ind_sets = []  # initializing a list that will store maximum independent sets
    for j in G.nodes:
        R = G.copy()  # Storing a copy of the graph as a residual
        neigh = [n for n in R.neighbors(j)]  # Catch all the neighbours of j
        R.remove_node(j)  # removing the node we start from
        iset = [j]
        R.remove_nodes_from(neigh)  # Removing the neighbours of j
        if R.number_of_nodes() != 0:
            x = get_min_degree_vertex(R)
        while R.number_of_nodes() != 0:
            neigh2 = [m for m in R.neighbors(x)]
            R.remove_node(x)
            iset.append(x)
            R.remove_nodes_from(neigh2)
            if R.number_of_nodes() != 0:
                x = get_min_degree_vertex(R)

        max_ind_sets.append(iset)

    return(max_ind_sets)


def get_min_degree_vertex(Residual_graph):
    &#39;&#39;&#39;Takes in the residual graph R and returns the node with the lowest degree&#39;&#39;&#39;
    degrees = [val for (node, val) in Residual_graph.degree()]
    node = [node for (node, val) in Residual_graph.degree()]
    node_degree = dict(zip(node, degrees))
    return (min(node_degree, key=node_degree.get))
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;step-2-the-optimization-model&#34;&gt;(Step 2) The optimization model&lt;/h4&gt;
&lt;p&gt;Now we define the optimization model as a linear program using the CPLEX python API. We initialize the set of constraints based on the greedy heuristic.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import cplex

prob = cplex.Cplex()
numvar = len(G.nodes)

def func(x): return &amp;quot;x&amp;quot;+str(x)

names = list(map(func, G.nodes))
var_type = [prob.variables.type.continuous] * numvar
prob.variables.add(names=names,
                   lb=[0.0] * numvar,
                   ub=[1.0] * numvar,
                   types=var_type)
prob.objective.set_sense(prob.objective.sense.maximize)
prob.objective.set_linear([(n, 1.0) for n in names])
lhs = []

# Call the greedy heuristic to generate a starting set of independent sets
mis = greedy_init(G)

for iset in mis:
    con_vars = [func(i) for i in iset]
    coeffs = [1.0] * len(con_vars)
    lhs.append(cplex.SparsePair(con_vars, coeffs))
prob.linear_constraints.add(lin_expr=lhs,
                            rhs=[1.0] * len(lhs),
                            senses=[&#39;L&#39;] * len(lhs))
print(&amp;quot;Constraint: Maximum independent set. ({} constraints)&amp;quot;.format(len(mis)))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To solve this model, we would use the following snippet to execute the model and return the final solution.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;prob.solve()
status = prob.solution.status[prob.solution.get_status()]
print(&amp;quot;Status:{}&amp;quot;.format(status))

if prob.solution.get_status() in [101, 105, 107, 111, 113]:
    # Optimal/feasible, so get the solution
    print(&amp;quot;Solution value: &amp;quot;)
    print(prob.solution.get_objective_value())

    # get the configuration
    x_res = prob.solution.get_values(names)
    for x_name, val in zip(names, x_res):
        if val &amp;gt; 0:
            print(x_name, val)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;step-3-generate-lazy-constraints&#34;&gt;(Step 3) Generate lazy constraints&lt;/h4&gt;
&lt;p&gt;We&amp;rsquo;ve not managed the lazy constraints yet. To do this we will use a CPLEX &lt;code&gt;Callback&lt;/code&gt;. The &lt;code&gt;LazyConstraintCallback&lt;/code&gt; is called each time an optimal or integral solution is found. The implementation looks like this.&lt;/p&gt;
&lt;p&gt;To find new independent sets, we take the solution (potentially fractional) and use a greedy heuristic to first generate an independent set on the induced subgraph of the solution. We then expand on the independent set for the entire graph using another &lt;code&gt;greedy_expand&lt;/code&gt; procedure which uses the same logic as &lt;code&gt;greedy_init&lt;/code&gt; to grown the independent set.&lt;/p&gt;
&lt;p&gt;If there are no additional independent sets, no constraints are added and the solver terminates.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class LazyCallback(LazyConstraintCallback):
    &amp;quot;&amp;quot;&amp;quot;Lazy constraint callback to generate maximum independent sets on the fly.

    There are too many such constraints to make them all available to 
    CPLEX right away - and in any case, very few of them are valid.

    So generate them on the fly.
    &amp;quot;&amp;quot;&amp;quot;

    # Callback constructor.
    #
    # Any needed fields are set externally after registering the callback.
    def __init__(self, env):
        super().__init__(env)

    def __call__(self):

        values = self.get_values(self.names)

        # Any node with non-zero value is considered as part of the set
        curr_solution = [int(name[1:]) for name, val in zip(self.names, values) if val &amp;gt;= 0.001]
        print(&amp;quot;Current solution: &amp;quot;, curr_solution)

        # Look to generate all independent sets that would cut off the (fractional)
        # value. To do this, first induce a subgraph - and for each node, built a
        #
        subG = self.G.subgraph(curr_solution)
        sub_ind_set = greedy_init(subG)
        max_ind_sets = [greedy_expand(self.G, sset) for sset in sub_ind_set]

        for iset in max_ind_sets:

            con_vars = [func(i) for i in iset]
            coeffs = [1.0] * len(con_vars)
            lhs = cplex.SparsePair(con_vars, coeffs)
            self.add(constraint=lhs, rhs=1.0, sense=&#39;L&#39;)

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The callback must be registered with the problem instance and any variables passed as attributes as so:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from cplex.callbacks import LazyConstraintCallback

# register callbacks to generate additional independent sets on the fly
lazycb = prob.register_callback(LazyCallback)

# pass any arguments as class attributes
lazycb.names = names
lazycb.G = G
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For completeness, here is what the &lt;code&gt;greedy_expand&lt;/code&gt; function does&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def greedy_expand(G, init_set):

    R = G.copy()
    neigh = [n for i in init_set for n in R.neighbors(i)]
    R.remove_nodes_from(init_set)
    R.remove_nodes_from(neigh)
    if R.number_of_nodes() != 0:
        x = get_min_degree_vertex(R)
    while R.number_of_nodes() != 0:
        neigh2 = [m for m in R.neighbors(x)]
        R.remove_node(x)
        init_set.append(x)
        R.remove_nodes_from(neigh2)
        if R.number_of_nodes() != 0:
            x = get_min_degree_vertex(R)

    return init_set
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;putting-it-all-together&#34;&gt;Putting it all together&lt;/h4&gt;
&lt;p&gt;Running this all together as shown in this 
&lt;a href=&#34;https://gist.github.com/rahulnair23/ef3c14a3f08afdf0840459e10969eda8&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gist&lt;/a&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/rahulnair23/ef3c14a3f08afdf0840459e10969eda8.js&#34;&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;gives the following output:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Constraint: Maximum independent set. (18 constraints)
Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de
CPXPARAM_Read_DataCheck                          1
Warning: Control callbacks may disable some MIP features.
Lazy constraint(s) or lazy constraint/branch callback is present.
    Disabling dual reductions (CPX_PARAM_REDUCE) in presolve.
    Disabling non-linear reductions (CPX_PARAM_PRELINEAR) in presolve.
    Disabling presolve reductions that prevent crushing forms.
         Disabling repeat represolve because of lazy constraint/incumbent callback.
Tried aggregator 1 time.
MIP Presolve eliminated 6 rows and 0 columns.
Reduced MIP has 12 rows, 18 columns, and 72 nonzeros.
Reduced MIP has 0 binaries, 0 generals, 0 SOSs, and 0 indicators.
Presolve time = 0.00 sec. (0.02 ticks)
MIP emphasis: balance optimality and feasibility.
MIP search method: traditional branch-and-cut.
Parallel mode: none, using 1 thread.
Root relaxation solution time = 0.00 sec. (0.01 ticks)
Current solution:  [5, 7, 8, 14, 16, 17]
Current solution:  [4, 10, 11, 13]
Current solution:  [0, 6, 8, 10, 11]
Current solution:  [4, 6, 8, 10, 11, 16]
Current solution:  [0, 2, 4, 5, 6, 8]
Current solution:  [6, 7, 8]
Current solution:  [6, 7, 8]

        Nodes                                         Cuts/
   Node  Left     Objective  IInf  Best Integer    Best Bound    ItCnt     Gap         Variable B NodeID Parent  Depth

*     0     0      integral     0        3.0000        6.0000        8  100.00%                        0             0
Elapsed time = 0.02 sec. (0.16 ticks, tree = 0.00 MB, solutions = 1)

User cuts applied:  17

Root node processing (before b&amp;amp;c):
  Real time             =    0.02 sec. (0.16 ticks)
Sequential b&amp;amp;c:
  Real time             =    0.00 sec. (0.00 ticks)
                          ------------
Total (root+branch&amp;amp;cut) =    0.02 sec. (0.16 ticks)
Status:MIP_optimal
Solution value: 
3.0
x6 1.0
x7 1.0
x8 1.0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This identified one of the 3-vertex cliques, which is the maximum. The program started with 18 maximum independent sets generated greedily. It generated a further 17 user cuts one for each new independent set that were constructed on the fly. For a graph with $n$ nodes, there can be at most $3^{n/3}$ maximum independent sets although most have far fewer. For our 18 node graph, that would be 729 sets. In this greedy solution method, we got away with generating just 35.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Keep it simple stupid! A non-parametric kernel regression approach to forecast travel speeds</title>
      <link>https://rahulnair23.github.io/publication/nair-2020-keep/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate>
      <guid>https://rahulnair23.github.io/publication/nair-2020-keep/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Perfusion Quantification from Endoscopic Videos: Learning to Read Tumor Signatures</title>
      <link>https://rahulnair23.github.io/publication/zhuk-2020-perfusion/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate>
      <guid>https://rahulnair23.github.io/publication/zhuk-2020-perfusion/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Scenario-based XAI for Humanitarian Aid Forecasting</title>
      <link>https://rahulnair23.github.io/publication/andres-2020-scenario/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate>
      <guid>https://rahulnair23.github.io/publication/andres-2020-scenario/</guid>
      <description></description>
    </item>
    
    <item>
      <title>A machine learning approach to scenario analysis and forecasting of mixed migration</title>
      <link>https://rahulnair23.github.io/publication/nair-2019-machine/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>https://rahulnair23.github.io/publication/nair-2019-machine/</guid>
      <description></description>
    </item>
    
    <item>
      <title>An ensemble prediction model for train delays</title>
      <link>https://rahulnair23.github.io/publication/nair-2019-ensemble/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>https://rahulnair23.github.io/publication/nair-2019-ensemble/</guid>
      <description></description>
    </item>
    
    <item>
      <title>RSM: An Explainable Predictive Sales Route Selector</title>
      <link>https://rahulnair23.github.io/publication/chen-2019-rsm/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>https://rahulnair23.github.io/publication/chen-2019-rsm/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Towards Automated Extraction of Business Constraints from Unstructured Regulatory Text</title>
      <link>https://rahulnair23.github.io/publication/nair-2018-towards/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>https://rahulnair23.github.io/publication/nair-2018-towards/</guid>
      <description></description>
    </item>
    
    <item>
      <title>A predictive-control framework to address bus bunching</title>
      <link>https://rahulnair23.github.io/publication/andres-2017-predictive/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>https://rahulnair23.github.io/publication/andres-2017-predictive/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Spillover detection for urban traffic networks using signal timing and stop line detector data</title>
      <link>https://rahulnair23.github.io/publication/wang-2016-spillover/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>https://rahulnair23.github.io/publication/wang-2016-spillover/</guid>
      <description></description>
    </item>
    
    <item>
      <title> A multi-scale approach to data-driven mass migration analysis</title>
      <link>https://rahulnair23.github.io/publication/mohammed-2016-multiscale/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>https://rahulnair23.github.io/publication/mohammed-2016-multiscale/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Allaboard: visual exploration of cellphone mobility data to optimise public transport</title>
      <link>https://rahulnair23.github.io/publication/di-2016-allaboard/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>https://rahulnair23.github.io/publication/di-2016-allaboard/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Data-Driven Transit Network Design From Mobile Phone Trajectories</title>
      <link>https://rahulnair23.github.io/publication/pinelli-2016-data/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>https://rahulnair23.github.io/publication/pinelli-2016-data/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Docit: an integrated system for risk-averse multimodal journey advising</title>
      <link>https://rahulnair23.github.io/publication/botea-2016-docit/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>https://rahulnair23.github.io/publication/botea-2016-docit/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Characterization of network traffic processes under adaptive traffic control systems</title>
      <link>https://rahulnair23.github.io/publication/pascale-2015-isttt/</link>
      <pubDate>Thu, 01 Jan 2015 00:00:00 +0000</pubDate>
      <guid>https://rahulnair23.github.io/publication/pascale-2015-isttt/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Characterization of network traffic processes under adaptive traffic control systems</title>
      <link>https://rahulnair23.github.io/publication/pascale-2015-trc/</link>
      <pubDate>Thu, 01 Jan 2015 00:00:00 +0000</pubDate>
      <guid>https://rahulnair23.github.io/publication/pascale-2015-trc/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Optimizing dial-a-ride services in Maryland: Benefits of computerized routing and scheduling</title>
      <link>https://rahulnair23.github.io/publication/markovic-2015-optimizing/</link>
      <pubDate>Thu, 01 Jan 2015 00:00:00 +0000</pubDate>
      <guid>https://rahulnair23.github.io/publication/markovic-2015-optimizing/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Allaboard: visual exploration of cellphone mobility data to optimise public transport</title>
      <link>https://rahulnair23.github.io/publication/sbodio-2014-allaboard/</link>
      <pubDate>Wed, 01 Jan 2014 00:00:00 +0000</pubDate>
      <guid>https://rahulnair23.github.io/publication/sbodio-2014-allaboard/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Data as a resource: real-time predictive analytics for bus bunching</title>
      <link>https://rahulnair23.github.io/publication/nair-2015-data/</link>
      <pubDate>Wed, 01 Jan 2014 00:00:00 +0000</pubDate>
      <guid>https://rahulnair23.github.io/publication/nair-2015-data/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Equilibrium design of bicycle sharing systems: the case of Washington D.C.</title>
      <link>https://rahulnair23.github.io/publication/nair-2014-equ-dc/</link>
      <pubDate>Wed, 01 Jan 2014 00:00:00 +0000</pubDate>
      <guid>https://rahulnair23.github.io/publication/nair-2014-equ-dc/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Equilibrium network design of shared-vehicle systems</title>
      <link>https://rahulnair23.github.io/publication/nair-2014-equilibrium/</link>
      <pubDate>Wed, 01 Jan 2014 00:00:00 +0000</pubDate>
      <guid>https://rahulnair23.github.io/publication/nair-2014-equilibrium/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Semantic Traffic Diagnosis with STAR-CITY: Architecture and Lessons Learned from Deployment in Dublin, Bologna, Miami and Rio</title>
      <link>https://rahulnair23.github.io/publication/lecue-2014-semantic/</link>
      <pubDate>Wed, 01 Jan 2014 00:00:00 +0000</pubDate>
      <guid>https://rahulnair23.github.io/publication/lecue-2014-semantic/</guid>
      <description></description>
    </item>
    
    <item>
      <title>AllAboard: a system for exploring urban mobility and optimizing public transport using cellphone data</title>
      <link>https://rahulnair23.github.io/publication/berlingerio-2013-allaboard/</link>
      <pubDate>Tue, 01 Jan 2013 00:00:00 +0000</pubDate>
      <guid>https://rahulnair23.github.io/publication/berlingerio-2013-allaboard/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Large-scale transit schedule coordination based on journey planner requests</title>
      <link>https://rahulnair23.github.io/publication/nair-2013-trb/</link>
      <pubDate>Tue, 01 Jan 2013 00:00:00 +0000</pubDate>
      <guid>https://rahulnair23.github.io/publication/nair-2013-trb/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Robust Dynamic Distribution of Security Assets in Transit Systems</title>
      <link>https://rahulnair23.github.io/publication/nair-2013-robust/</link>
      <pubDate>Tue, 01 Jan 2013 00:00:00 +0000</pubDate>
      <guid>https://rahulnair23.github.io/publication/nair-2013-robust/</guid>
      <description></description>
    </item>
    
    <item>
      <title>2012 Maryland State Highway Mobility Report</title>
      <link>https://rahulnair23.github.io/publication/sh-amobilityreport/</link>
      <pubDate>Sun, 01 Jan 2012 00:00:00 +0000</pubDate>
      <guid>https://rahulnair23.github.io/publication/sh-amobilityreport/</guid>
      <description></description>
    </item>
    
    <item>
      <title>A Porous Flow Model for Disordered Heterogeneous Traffic Streams</title>
      <link>https://rahulnair23.github.io/publication/nair-2012-porous/</link>
      <pubDate>Sun, 01 Jan 2012 00:00:00 +0000</pubDate>
      <guid>https://rahulnair23.github.io/publication/nair-2012-porous/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Large-Scale Vehicle Sharing Systems: Analysis of Vélib&#39;</title>
      <link>https://rahulnair23.github.io/publication/nair-2012-large/</link>
      <pubDate>Sun, 01 Jan 2012 00:00:00 +0000</pubDate>
      <guid>https://rahulnair23.github.io/publication/nair-2012-large/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Missed connections: quantifying and optimizing multi-modal interconnectivity in cities</title>
      <link>https://rahulnair23.github.io/publication/coffey-2012-missed/</link>
      <pubDate>Sun, 01 Jan 2012 00:00:00 +0000</pubDate>
      <guid>https://rahulnair23.github.io/publication/coffey-2012-missed/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Relation between Real-Time Data and Hourly Traffic Volume Taking Heavy Vehicles into Consideration</title>
      <link>https://rahulnair23.github.io/publication/sadrsadat-2012-relation/</link>
      <pubDate>Sun, 01 Jan 2012 00:00:00 +0000</pubDate>
      <guid>https://rahulnair23.github.io/publication/sadrsadat-2012-relation/</guid>
      <description></description>
    </item>
    
    <item>
      <title>A Geographic Information System-Based Real-Time Decision Support Framework for Routing Vehicles Carrying Hazardous Materials</title>
      <link>https://rahulnair23.github.io/publication/kim-2011-geographic/</link>
      <pubDate>Sat, 01 Jan 2011 00:00:00 +0000</pubDate>
      <guid>https://rahulnair23.github.io/publication/kim-2011-geographic/</guid>
      <description></description>
    </item>
    
    <item>
      <title>A porous flow approach to modeling heterogeneous traffic in disordered systems</title>
      <link>https://rahulnair23.github.io/publication/nair-2011-isttt/</link>
      <pubDate>Sat, 01 Jan 2011 00:00:00 +0000</pubDate>
      <guid>https://rahulnair23.github.io/publication/nair-2011-isttt/</guid>
      <description></description>
    </item>
    
    <item>
      <title>A porous flow approach to modeling heterogeneous traffic in disordered systems</title>
      <link>https://rahulnair23.github.io/publication/nair-2011-porous/</link>
      <pubDate>Sat, 01 Jan 2011 00:00:00 +0000</pubDate>
      <guid>https://rahulnair23.github.io/publication/nair-2011-porous/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Fleet management for vehicle sharing operations</title>
      <link>https://rahulnair23.github.io/publication/nair-2011-fleet/</link>
      <pubDate>Sat, 01 Jan 2011 00:00:00 +0000</pubDate>
      <guid>https://rahulnair23.github.io/publication/nair-2011-fleet/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Design and Analysis of Vehicle Sharing Programs: A Systems Approach</title>
      <link>https://rahulnair23.github.io/publication/nair-2010-design/</link>
      <pubDate>Fri, 01 Jan 2010 00:00:00 +0000</pubDate>
      <guid>https://rahulnair23.github.io/publication/nair-2010-design/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Resilience Framework for Ports and Other Intermodal Components</title>
      <link>https://rahulnair23.github.io/publication/nair-2010-resilience/</link>
      <pubDate>Fri, 01 Jan 2010 00:00:00 +0000</pubDate>
      <guid>https://rahulnair23.github.io/publication/nair-2010-resilience/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Evaluation of relocation strategies for emergency medical service vehicles</title>
      <link>https://rahulnair23.github.io/publication/nair-2009-evaluation/</link>
      <pubDate>Thu, 01 Jan 2009 00:00:00 +0000</pubDate>
      <guid>https://rahulnair23.github.io/publication/nair-2009-evaluation/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Security and Mobility of Intermodal Freight Networks</title>
      <link>https://rahulnair23.github.io/publication/miller-2009-security/</link>
      <pubDate>Thu, 01 Jan 2009 00:00:00 +0000</pubDate>
      <guid>https://rahulnair23.github.io/publication/miller-2009-security/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Application and Validation of Dynamic Freight Simulation-Assignment Model to Large-Scale Intermodal Rail Network: Pan-European Case</title>
      <link>https://rahulnair23.github.io/publication/zhang-2008-application/</link>
      <pubDate>Tue, 01 Jan 2008 00:00:00 +0000</pubDate>
      <guid>https://rahulnair23.github.io/publication/zhang-2008-application/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Dynamic Relocation of Scarce Resources: The Case of Emergency Medical Service Vehicles in Montreal</title>
      <link>https://rahulnair23.github.io/publication/nair-2008-dynamic/</link>
      <pubDate>Tue, 01 Jan 2008 00:00:00 +0000</pubDate>
      <guid>https://rahulnair23.github.io/publication/nair-2008-dynamic/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Market potential for international rail-based intermodal services in Europe: From sea to shining sea</title>
      <link>https://rahulnair23.github.io/publication/nair-2008-market/</link>
      <pubDate>Tue, 01 Jan 2008 00:00:00 +0000</pubDate>
      <guid>https://rahulnair23.github.io/publication/nair-2008-market/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Assessing Service Design Options and Strategies for Overcoming Barriers in the Reorient Intermodal Freight Transport Corridor</title>
      <link>https://rahulnair23.github.io/publication/miller-2007-assessing/</link>
      <pubDate>Mon, 01 Jan 2007 00:00:00 +0000</pubDate>
      <guid>https://rahulnair23.github.io/publication/miller-2007-assessing/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Modelling corridor freight transport for demonstration of seamless international rail freight services</title>
      <link>https://rahulnair23.github.io/publication/arcot-2007-modelling/</link>
      <pubDate>Mon, 01 Jan 2007 00:00:00 +0000</pubDate>
      <guid>https://rahulnair23.github.io/publication/arcot-2007-modelling/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Application of floating car data using GIS for dynamic vehicular routing: A case study</title>
      <link>https://rahulnair23.github.io/publication/nair-2004/</link>
      <pubDate>Thu, 01 Jan 2004 00:00:00 +0000</pubDate>
      <guid>https://rahulnair23.github.io/publication/nair-2004/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
