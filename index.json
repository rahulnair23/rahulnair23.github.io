[{"authors":["admin"],"categories":null,"content":"Rahul Nair is a Research Staff Member at IBM Research Europe in Dublin. His research interests are in technology and development (societal applications), trusted computing. His expertise is in optimization, machine learning applied across sectors particularly transportation, healthcare, and business computing. He holds a Ph.D. from University of Maryland College Park.\n","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1591351751,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"https://rahulnair23.github.io/author/rahul-nair/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/rahul-nair/","section":"authors","summary":"Rahul Nair is a Research Staff Member at IBM Research Europe in Dublin. His research interests are in technology and development (societal applications), trusted computing. His expertise is in optimization, machine learning applied across sectors particularly transportation, healthcare, and business computing.","tags":null,"title":"Rahul Nair","type":"authors"},{"authors":[],"categories":[],"content":"This is a brief review of a paper by Parmentier and Vidal on \u0026ldquo;Optimal Counterfactual Explanations in Tree Ensembles\u0026rdquo;. A counterfactual explanation, in the context of machine learning (ML) models, answers the question what is the minimal change in input (features) that yields a different (desirable) outcome? In the context of ML deployments this type of reasoning provides a substantive recourse to people subject to algorithmic decision making. It could also be viewed as a form of justification for a negative outcome.\nTwo aspects are of interest in this paper. First, it deals with finding a specific input in the feature space that optimizes some criteria. While their criteria is different, this is similar to what we aimed to do in our paper on quantifying safety via maximum deviations, which looks for the worst case input that maximizes the deviation from the output relative to some reference model. Second, it offers a formulation that could be potentially reused for our safety assessments in tree ensembles using mixed integer programming.\nModel Setting A standard supervised classification setting, with a training set $\\{x_k, c_k\\}_{k=1}^n$ with each $x_k$ a $p$-dimensional vector associated with an outcome label $c_k \\in \\mathcal{C}$ is assumed.\nA tree ensemble (e.g. gradient boosted trees, random forest) is denoted by $\\mathcal{T}$ that have a set of trees $t \\in \\mathcal{T}$ that maps inputs to class probabilities $F_{tc}$. For an input sample $\\mathbb{x}$, the tree ensemble returns class $c$ that maximizes the sum of probabilities, i.e. $F_{\\mathcal{T}}(\\mathbb{x}) = \\arg \\max_c \\sum w_t F_{tc}(\\mathbb{x})$.\nThe paper then develops a mixed integer program in two stages, (a) branching decisions, and (b) feature consistency across trees.\nBranch Choices The internal structure is modeled as a network flow problem, albeit without an explicit sink node. But this isn\u0026rsquo;t needed. There is one unit of flow that starts at the root node and must travel to a leaf node. The nice trick here is to use decision variables to constrain flows at \u0026ldquo;transshipment\u0026rdquo; nodes. This allows the number of binary variables to be reduced.\nSpecifically,\n$$ \\begin{align} y_t = 1 \u0026amp; \\qquad t \\in \\mathcal{T} \\\\ y_{tv} = y_{tl(v)} + y_{tr(v)} \u0026amp; \\qquad t\\in \\mathcal{T}, v \\in \\mathcal{V}_t^I \\\\ \\sum _{v \\in \\mathcal{V} _{td}^I} y _{tl(v)} \\le \\lambda _{td} \u0026amp; \\qquad t \\in \\mathcal{T}, d \\in D_t \\\\ y _{tv} \\in [0, 1] \u0026amp; \\qquad t \\in \\mathcal{T}, v \\in \\mathcal{V} _t^I \\cup \\mathcal{V} _t^L \\\\ \\lambda _{td} \\in \\{0, 1\\} \u0026amp; \\qquad t \\in \\mathcal{T}, d \\in D_t. \\end{align} $$\nThe first equation initializes flow at the root node at each tree to one unit quantity. The next equation is a flow conservation constraint, i.e. the sum of flow to the child nodes is equal to what is available at the parent node. The next constraint works at a specific depth level by limiting the lambdas to be 1 if any of the left branches have non-zero flows. In the supplement they use an induction argument to prove that the result of this set of constraints will result in integer $y$\u0026rsquo;s even if they are modeled as continuous variables. At first inspection, seems like this would admit fractional solutions as well.\nConsistency The $y$ and $\\lambda$ decision variables decide on flows through each tree independently. However, depending on what the optimization criteria is - the flows must be consistent across all the trees. For example, a split node that uses gender as a feature, cannot simultaneously branch left and right (in different trees). To address this, the introduce classes of feature variables to handle various cases where features are numerical, categorical, or binary. Take the example of binary features, they introduce a decision variable for each feature $x_i$ which is binary. At each split node, the branching is made consistent by adding the constraints $$ \\begin{aligned} x_i \\le 1 - y_{tl(v)} \u0026amp; \\qquad \\\\ x_i \\ge y_{tr(v)} \u0026amp; \\quad t \\in \\mathcal{T}, v \\in \\mathcal{V} _{ti}^I \\end{aligned} $$\nThe objective of their model is to minimize the Gower distance from the input vector. This is treated independently for each of the feature cases and is modeled as a cost that needs to be minimized. This concludes the model specification. Overall, this approach reduces the number of integer variables, and so has computational benefits. Several of the decision variables (but not all) can be relaxed leading to simpler models that are shown to be solved quickly.\nCode for this is available here and may be a point of review for a future note.\n","date":1674482607,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1674482607,"objectID":"695ff6614be22d8dc7ca0d481af4c4d9","permalink":"https://rahulnair23.github.io/post/counterfactuals-ensembles/","publishdate":"2023-01-23T14:03:27Z","relpermalink":"/post/counterfactuals-ensembles/","section":"post","summary":"This is a brief review of a paper by Parmentier and Vidal on \u0026ldquo;Optimal Counterfactual Explanations in Tree Ensembles\u0026rdquo;. A counterfactual explanation, in the context of machine learning (ML) models, answers the question what is the minimal change in input (features) that yields a different (desirable) outcome?","tags":[],"title":"Optimal Counterfactuals in Tree Ensembles","type":"post"},{"authors":[],"categories":[],"content":"Suppose you are given a dataset on some process with the following attributes. The process that generates the data is complex and not fully observable. The data only captures part of dynamics of the process. Part of the dynamics involve decisions that you can control at some point in the future. The hope is that these knobs will be determined by some suitably advanced intelligence that needs to be determined as well. So you have two problems, (a) from the dataset infer process dynamics in a reasonable manner, and (b) determine an optimal policy that can control the environment determined in (a).\nIn established reinforcement learning parlance, the first problem deals with specifying the environment, and the second deals with defining the agent. This post is a short discussion of the former.\nWhat is an environment anyway? The environment is the model of the world that the agent interacts with. It is associated with variables that describe its state. For instance, in an environment describing an HVAC system, one of the state variables could be the temperature of the room. If an agent acts on this state, then the environment must minimally provide the next state and an estimate of the reward. We\u0026rsquo;ll get to the reward shortly. An agent in our HVAC example could be a person changing the temperature control. As a result of that change, the environment then provides a revised temperature of the room for the next time step.\nThe reward is a numeric value that encodes desirable behaviour that an agent seeks. In the HVAC example, this could be the negative of the absolute temperature difference between a desired temperature and the actual temperature (in the state variable). This way, when we maximise reward, we aim to keep the temperature close to the desired one (without getting too hot or too cold).\nTherefore the environment must be able to assess the impact of an agent action on its state. In other words, it must encode transition dynamics in some way. Additionally, it must estimate reward for a specific action when at a specific state. If you have these two elements, i.e. transitions and rewards, explicitly then you effectively have yourself a model of the environment!\nReinforcement learning setting Modeling this explicitly is not necessary for reinforcement learning. You can short cut the model by directly interacting with the environment. This is known as the model-free approach. These approaches do not make any assumptions beyond having a reward signal. So coming back to your problem at hand, you broadly have two choices:\nexperience-based/model-free: where you just sample next-state and reward based on past experiences that were similar (without bothering to actually learning anything about the process), model-based: where you explicitly try to learn elements of the underlying process (both transitions and rewards). This distinction seems to be emphasized in the literature more than what the definitions suggest. The principle difference being where the transitions come from. So which path do you choose for the problem?\nAs always, it depends! When you have a model of the environment, its easier to gather data (you can simply generate more), but may be harder to learn the policy itself and require additional assumptions. A model may allow for appropriate abstraction of complexity from the real environment. On the other hand, model-free methods may be effective for complex policies, but require a lot of experience (i.e. slower), and generally not transferable across tasks.\nLet\u0026rsquo;s build a model of the environment Assume for the task at hand, the model-based approach is attractive. You have sufficient data to supervise the learning of transition and reward functions. You still have some choices on how to proceed.\nThe Deep Mind Lecture on this topic has a nice overview of the main methods for model learning. Formally, our data represents a state-action-reward trajectory sequence, i.e. $$(S_1, A_1, R_1, S_2, \u0026hellip;, S_t, A_t, R_t, \u0026hellip;)$$, which is our experience. From this experience, we try to learn what the likely transitions and rewards are. To do so, we treat this as a supervised problem, i.e. $(S_1, A_1) \\rightarrow (R_2, S_2)$, and in general $(S_{t}, A_t) \\rightarrow (R_{t+1}, S_{t+1})$.\nWe then choose a function $f$, that given a state and action will provide the next state and reward, i.e. $$f(s, a) = r, s^\\prime$$. We learn any parameters associated with $f$ by minimising a chosen loss function. The result is an expectation model. There are some issues with expectation models for discrete values, but for linear values of you are mostly fine.\nFor some cases the outcomes may not be deterministic or you may need to predict exact viable states. In this case, a stochastic model (or a generative model) provides a sample of the next likely state but introduces noise in the process of doing so. For cases where the state and action spaces are not prohibitively large, a full model can be determined.\nIts also useful to distinguish between off-policy and on-policy methods at this point. An off-policy algorithm uses trajectories generates by some other policy to learn better policies for the agent. Examples of off-policy methods include Q-learning. On-policy algorithms on the other hand train an agent and use the same policy as its being learnt. Examples include SARSA.\n","date":1660645241,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1661157129,"objectID":"2c53f04fa85d97192e24c5455e216326","permalink":"https://rahulnair23.github.io/post/on-models-of-environments/","publishdate":"2022-08-16T11:20:41+01:00","relpermalink":"/post/on-models-of-environments/","section":"post","summary":"Suppose you are given a dataset on some process with the following attributes. The process that generates the data is complex and not fully observable. The data only captures part of dynamics of the process.","tags":["reinforcement learning"],"title":"Some notes on Models of Environments","type":"post"},{"authors":[],"categories":["XAI","explainability"],"content":"At NeurIPS 2021 this year, Pierpaolo Tomassi and I have a demonstrator that brings together a few ideas on surrogates, bayesian networks, and model understanding. The system (while its still up!) shows one view on prospective explanations, one when requires some effort from users to build a mental model of ML model by probing interactively.\nThe system is designed for regression and classification tasks with structured data. Prospective explanations are aimed at showing how models work by highlighting likely changes in model outcomes under changes in input ( Shneiderman 2020). This in contrast to most post-hoc explanability methods, that aim to provide a justification for a decision retrospectively. A desired property of explanations is to help with creating the right mental model of an AI system. The right mental model leads to greater trust ( Bansal et al., 2019). Interactive systems that allow for exploration have been shown to improve user comprehension ( Chen et al., 2019) albeit being more time consuming.\nOur system is designed to provide fast estimates of changes in outcomes for any arbitrary exploratory query from users. Such queries are typical partial, i.e. involve only a selected number of features, the outcomes labels are shown therefore as likelihoods. Repeated queries can therefore indicate which aspects of the feature space are more likely to influence the target variable.\nTo achieve fast interactive exploration, we build a surrogate Bayesian network model. A surrogate here implies the use of model labels instead of ground truth labels to represent model behaviour. Bayesian network models are stored as directed acyclic graphs where links represent dependence between variables. This graph representation can be learnt directly from the data through a structure learning task, or be provided externally and only conditional probabilities estimated from the data. Bayesian networks are efficient in storing the joint distribution over feature sets and allow for fast inference over arbitrary queries.\nSpecifically, we seek to explain a model $f$ that maps an input vector $\\mathbf{x}_i$ to an output $y_i$. Consider a validation dataset $D$, a set of $(\\mathbf{x}_i, y_i)$ observations for $i=1,\u0026hellip;,n$. For this validation data, we generate a set of labels $\\hat{y}_i = f(\\mathbf{x}_i)$. A structure learning algorithm is used, treating both features $\\mathbf{x}_i$ and labels $\\hat{y}_i$ as random variables to learn a graph $G(V, E)$ and associated probability tables. During inference, users provide arbitrary feature values, and the marginal distribution of the target class estimated using the formula\n$$P(x_1 = a_1, x_2 = a_2, \u0026hellip;, x_k=a_k,y=y_1) = \\prod_{v=1}^{n} P(x_v=a_v| x_j = a_j , j\\in pa(v))$$\nwhere $pa(v)$ denotes all parents of a node $v$ in $G$. While inference in Bayesian networks is NP-Hard, assumptions on the structure of $G$ admits fast inference in practice. We experimented with four strategies in particular. First, the network structure was defined a priori from expert opinion leading to a lower node degree. Second, we experimented with limiting the number of parents for each node. Third, we learnt the structure on a limited set of important features as determined by feature important scores. Lastly, the network is training on a subset of features used in $f$. In our experiments, these approaches did not degrade performance of the surrogate model substantively.\nThe main advantages of our approach are that (a) inference in most practical cases is very fast and supports real-time feedback allowing for interactivity, (b) inference can be done with partial information on features, and (c) any indirect effects are also considered in estimating target class distributions. Regression models involve an additional consideration. The target variable $\\hat{y}_i$ is discretized before learning the structure. This is necessary to avoid the difficulty of perceiving changes in continuous probability distributions.\nThe system provides two views. The first, a feature board showing all relevant features with clickable values that formulate queries. These are clustered by theme. Any selection results in updates to marginal distributions for all other variables.\nThe second view is the learnt Bayesian network itself.\nWe have deployed the system for several health and social care domains. Here we demonstrate it for a humanitarian application that deals with forced displacement. We explain two model classes for two tasks, one classification and one regression. Forced displacement refers to the involuntary movement of people away from their homes. This sector is highly complex, and a wide range of factors can potentially influence the onset and severity of displacement crisis. Responding organizations have to plan under high uncertainty on the type of humanitarian need. Previous user-studies for this sector has uncovered the need to surface this uncertainty ( Andres et al., 2020) which is both aleatory (uncertainty due to things that cannot be predicted) and epistemic (uncertainty due to missing information).\nWhile the regression task is to forecast volume of displaced persons, the classification task seeks to classify if the volume is likely to exceed a \u0026ldquo;crisis\u0026rdquo; threshold (the UNHCR informally deems a crisis when displacement volumes are in excess of 75,000 persons). For each task, prospective explanations of two models each that are training on data from a period from 1980 through 2015. Data after 2015 is used for the validation set $D$. For classification, a logistic regression with validation accuracy (acc) 97.2% and a gradient boosted classifier (acc: 98.03%) are shown. Both models exhibit poor precision for the minority class. Compared to ground truth reference, the models are less likely to predict a crisis. For regression we show a linear regression (MAE: 2086.03) and a gradient boosted regressor (MAE: 1155.69). For the latter, baseline performance (overestimates for 100-5000 ranges, and underestimates for $\u0026gt;5000$) can be seen. When uses toggle the human rights dimension to `worse\u0026rsquo;, predictions for \u0026gt;5000 better match ground truth labels. While this estimator is highly non-linear, the impact of influencing factors can be understood by interacting with features values and visual representation of outcome marginals.\n","date":1635254045,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1635260629,"objectID":"14a0282f21168a02e6b8d7751faa3636","permalink":"https://rahulnair23.github.io/post/prospective-explanations/","publishdate":"2021-10-26T14:14:05+01:00","relpermalink":"/post/prospective-explanations/","section":"post","summary":"At NeurIPS 2021 this year, Pierpaolo Tomassi and I have a demonstrator that brings together a few ideas on surrogates, bayesian networks, and model understanding. The system (while its still up!","tags":[],"title":"Prospective Explanations","type":"post"},{"authors":[],"categories":[],"content":"In this post, we summarize the set partitioning problem, a widely applicable formalization that can be used in a variety of contexts. You are given a set of elements that need to be divided. Each division, or partition, has an associated cost that you seek to minimize. The set partitioning problem asks: what is the best way to partition such that the total cost can be minimized?\nThis abstraction applied to a broad range of cases. From cutting cake for your family (if you consider cost to decrease as you get a larger piece) to more industrial applications like scheduling and crew rostering. There is also a large literature on the problem. A survey paper was published way back in 1976 and reference on applications in 1998.\nThe problem In the basic setting, we have a set $X$ of elements and a collection of possible partitions $K={k_1, k_2,\u0026hellip;,k_m}$ and a cost function $c(k_j)$ associated with each partition. $K$ is a very large collection as there are several ways to divide a set. We define a membership matrix $A = [a_{ij}]$ where $a_{ij}=1$ if element $i$ from $X$ is in the partition $k_j$ and $0$ otherwise. We denote $x_j$ as a decision variable to decide if partition $k_j$ is employed/used or not. With these definitions, the set partitioning problem can be written as:\n$$\\begin{aligned} \\min_{x} \\quad \u0026amp; \\sum_{j=1}^{n} c(k_j) x_j\\\\ \\textrm{s.t.} \\quad \u0026amp; \\sum_{j=1}^{m} a_{ij}x_j=1 \\quad \\forall i=1,\u0026hellip;,n\\\\ \u0026amp;x_j\\in {0,1} \\\\ \\end{aligned} $$\nThe program seeks to find a set of partitions that divide the input feature space such that every element is covered by exactly one partition. (If we allow for overlap between partitions, we could use a coverage type constraint $\\sum a_{ij}x_j \\ge 1$ as well). The objective is to find a partitioning that minimizes the total cost of the partition.\nColumn generation The model above can not typically be solved directly for realistic sized instances. This is because the collection $K$ is very large. For cases where the number of columns is much greater than the rows, i.e. $m\\gg n$, we can start with a restricted set of partitions and generate partitions on the fly as needed. The method of column generation is useful here to do this in a principled manner and can work as follows:\nRestricted master problem: We start with a limited set of partitions $J, J\\subset K$ and relax integral conditions to solve a linear program. Denote $\\pi_i$ as the dual variables associated with each equality constraint. We solve this limited problem and recover the values of $\\pi_i, i=1, \u0026hellip;, n$\nGenerate new partitions: Formulate a pricing problem that seeks to find partition that can have the largest benefit, in terms of the real objective. The general approach is to find a column (i.e. partition) that has the largest negative reduced cost. If $z_i$ as a binary decision variable that denotes if element $i$ is in the new partition, the problem of finding a new partition can be stated as\n$$\\begin{aligned} \\min_{z} \\quad \u0026amp; c(z) - \\sum_{i=1}^{n} \\pi_i z_i\\\\ \u0026amp;z_i\\in {0,1} \\\\ \\end{aligned} $$\nwhere $c(z)$ denotes the cost of the chosen partition. Depending on your problem specifics and the nature of this function the manner in which you solve this would vary. Looking for the column with the greatest negative reduced cost is a heuristic step and can be replaced by other procedures to generate new candidate partitions if you have some insights that help you to do so.\nReference implementation To build some intuition, let\u0026rsquo;s look at a reference implementation for a trivial toy example. The objective is to find the optimal partition of the English alphabet. The cost of each partition is 1.0 unit - so the optimal partition is trivially a set with all 26 letters. However, we start the program with smaller partitions to demonstrate that the column generation ends up with the optimal solution.\nDenote X is the set of elements and K is a initial set of partitions. These can be arbitrary subsets.\nimport string X = list(string.ascii_lowercase) K = [X[i:i + 5] for i in range(0, len(X), 5)] Let\u0026rsquo;s start with the (restricted) master program which is formulated as a linear program.\ndef master(X: List, K: List[List]) -\u0026gt; cplex.Cplex: \u0026quot;\u0026quot;\u0026quot; Restricted master problem \u0026quot;\u0026quot;\u0026quot; prob = cplex.Cplex() numvar = len(K) names = list(map(func, K)) var_type = [prob.variables.type.continuous] * numvar prob.variables.add(names=names, lb=[0.0] * numvar, ub=[1.0] * numvar, types=var_type) prob.objective.set_sense(prob.objective.sense.minimize) prob.objective.set_linear([(n, cost(kj)) for n, kj in zip(names, K)]) lhs = [] for i in X: coeffs = [1.0 if i in kj else 0.0 for kj in K] lhs.append(cplex.SparsePair(names, coeffs)) prob.linear_constraints.add(lin_expr=lhs, rhs=[1.0] * len(lhs), senses=['E'] * len(lhs), names=X) prob.set_problem_type(cplex.Cplex.problem_type.LP) print(f\u0026quot;{len(lhs)} constraints and {len(names)} variables.\u0026quot;) return prob The column generation procedure will solve the master at every iteration. Retrieve the dual variable values and then use that in a pricing step to determine a new partition to add (more on this next). If the reduced cost is negative then the objective will improve by the addition. If not, then no new partition has been found to improve the solution and we can terminate.\nwhile True: p.solve() pi = [-p for p in p.solution.get_dual_values()] # Generate new partitions/columns K_new, rc_new = pricing(X, pi) # termination check if rc_new \u0026lt;= -eps: newvar = func(K_new) print(f\u0026quot;Iteration {i}: Adding '{''.join(K_new)}' column with rc: {rc_new}.\u0026quot;) p.variables.add(names=[newvar], lb=[0.0], ub=[1.0], types=[p.variables.type.continuous]) p.objective.set_linear(newvar, cost(K_new)) for c in K_new: p.linear_constraints.set_coefficients(str(c), newvar, 1.0) p.set_problem_type(cplex.Cplex.problem_type.LP) i+=1 else: print(\u0026quot;No improvement partition found - Terminating column generation.\u0026quot;) break Now on to the pricing step - the step where new columns are generated. Here is where, in actual applications, the heavy lifting would happen. For this simple example, we can just generate partitions with negative duals and compute the reduced cost of this partition. In many cases, this can be a combinatorial problem (resulting in another integer program) or have some structure that can be leveraged (e.g. a shortest path or allow for dynamic programming solutions).\ndef pricing(X: List, pi: List, ncols: int=5) -\u0026gt; Tuple[List, float]: \u0026quot;\u0026quot;\u0026quot; Heuristic to generate new partitions \u0026quot;\u0026quot;\u0026quot; # set of elements that have negative dual variables K_new = [x for p, x in sorted(zip(pi, X), reverse=True) if p \u0026lt; 0.0] # reduced cost of new partition rc_new = rc(K_new, pi, X) return sorted(K_new), rc_new Putting it together Running this together as shown in this gist gives the following output:\n26 constraints and 3 variables. Iteration 0: Adding 'aku' column with rc: -2.0. Iteration 1: Adding 'bku' column with rc: -3.0. Iteration 2: Adding 'ablu' column with rc: -2.5. Iteration 3: Adding 'abklv' column with rc: -2.25. Iteration 4: Adding 'ckluv' column with rc: -2.2857142857142856. Iteration 5: Adding 'abckmuv' column with rc: -2.307692307692308. Iteration 6: Adding 'abckluw' column with rc: -2.736842105263158. Iteration 7: Adding 'aclmvw' column with rc: -6.777777777777778. Iteration 8: Adding 'bdlmuvw' column with rc: -3.2222222222222223. Iteration 9: Adding 'cdkvw' column with rc: -5.000000000000001. Iteration 10: Adding 'acdklmuvx' column with rc: -2.4818181818181815. Iteration 11: Adding 'abdkmwx' column with rc: -5.540540540540541. Iteration 12: Adding 'bclmx' column with rc: -8.879999999999999. ... Iteration 174: Adding 'abcdefghijklmnopqrstuwxy' column with rc: -0.10279605263157898. Iteration 175: Adding 'abcdefghijklmnopqrstuvwxyz' column with rc: -0.08656995788488508. Optimal value: 1.0 Partition: 'abcdefghijklmnopqrstuvwxyz' with cost: 1.0. Since each partition costs one unit, the optimal partition is one single partition.\nThe number of possible partitions of a set is known as the Bell number. For the 26 alphabet, the total number of possible partitions is very large (49631246523618756274 as per sympy.bell in Python). In this example the procedure evaluated 175 partitions before arriving at the optimal one.\n","date":1619785595,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1620331723,"objectID":"29fa209e7663c74ef98b7aed5da2952a","permalink":"https://rahulnair23.github.io/post/set-partition/","publishdate":"2021-04-30T13:26:35+01:00","relpermalink":"/post/set-partition/","section":"post","summary":"Integer programming approaches to set partitioning","tags":["optimization","integer programs","column generation"],"title":"Partitioning a set","type":"post"},{"authors":[],"categories":[],"content":"I stumbled across Binary Decision Diagrams (BDDs) by chance. They are an efficient data structure to represent sets of graphs. While a graph $G$ is a set of vertices $V$ along with a set of edges $E$ that connect the vertices, a graph set is a collection of subgraphs over the universe $V$. For example, a collection of feasible paths on $G$ would be a graph set. For a graph, if one has its corresponding BDD, specific types of queries can be handled with remarkable efficiency. See the this video from the creators of grahillion for an illustration of count queries. Knuth\u0026rsquo;s Art of Programming has an entire chapter devoted to this, but it hasn\u0026rsquo;t seen too many uses in the operations research community (at least as far as I\u0026rsquo;m aware). It seems like it could be pretty useful for several combinatorial optimization problems.\nSo in this post, we\u0026rsquo;ll work through one use - that of finding maximal independent sets in a graph. An independent set is a subset of vertices $V$, no two of which are adjacent. A maximal independent set is one where no additional nodes can be included and remain as an independent set. Not to be confused with the maximum set - which looks for an independent set with maximum weight.\nWe follow the work described in Morrison et al. (2014) on this problem which uses a Zero-suppressed Decision Diagram (ZDD), a variant of BDD where the false conditions are omitted. This is useful when the feasible solutions are sparse. There are several works that look into using ZDDs on graph and optimization problems, e.g. maximal cliques (Coudert, 1997) and 0/1 enumeration.\nZDDs In addition to a graph $G$, we also need a vertex ordering. While the ordering can be arbitrary, it does have an impact on the resulting ZDD. Each node in the ZDD, $Z_s$ is defined by a tuple $(v, lo, hi)$, where $v$ is the vertex it refers to in $G$ and $lo, hi$ are exactly two branches, known as the low and high branch, pointers to other nodes in the ZDD. These can be thought of as binary outcomes of the node from which they emanate. The terminal nodes in the ZDD have special meaning. The $\\top$ refers to a true outcome, while $\\bot$ encodes a false outcome.\nAll this becomes clearer in the example, taken from Morrison\u0026rsquo;s paper, below. The 5-node graph on the left has a corresponding ZDD on the right that encodes all possible maximal independent sets. The solid arrows are high branches, while the dashed ones are low branches.\nThis Directed Acyclic Graph (DAG) encodes every possible maximal independent set. Every feasible path from the root node till the terminal node $\\top$ represents a maximal independent set. The set it represented by nodes that have high branches coming out. For example, feasible path $v_1, v_2, v_3, v_4,\\top$ represents an maximal independent set ${v_2, v_4}$ as these are the only nodes with solid (high) branches. There are several important properties of the ZDD that I skip here, like the uniqueness of nodes in $Z_s$, each node is encountered only once, etc.\nThe ZDD can now be used to enumerate all maximal independent sets and support non-trivial operations that would be expensive otherwise, e.g. a count of all maximal independent sets without listing each one. There are other advantages as well. For instance, if there is a need to repeatedly query this ZDD, for example when node weights change, then one can compute this efficiently. Mostly, ZDD offer a compact representation of the underlying set.\nConstructing a ZDD To do all of this, the ZDD needs to be constructed first. There are few methods to do this for each class of problem you want to solve. Morrison et al. (2014), for example, tackle the case of the maximal independent set.\nIn this case, they describe an algorithm that takes as input a graph and a vertex ordering (this ordering can be arbitrary - but does have an influence on the size of the ZDD). The procedure is recursive, and it each iteration a single node is considered. It first considers if a maximal set can be constructed from the remaining vertices. Remaining here are w.r.t. to the ordering. It also checks if the set is already maximal. For these two cases, the procedure returns with the terminal nodes, i.e. $\\bot$ or $\\top$. If these conditions are not met, it creates two branches for the current node based on the next undominated node. A new node is added if it hasn\u0026rsquo;t previously been created.\nReference implementation A reference implementation is forthcoming (when time permits!).\nThere are existing packages like graphmillion that provide powerful abstractions for common problem classes. See also their accompanying paper. Azove is another tool (uses binary decision diagrams) for vertex enumeration that may be of interest as well.\n","date":1611666992,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1635260629,"objectID":"3c34eab7a4ba4ddc476cbd1bd22babbf","permalink":"https://rahulnair23.github.io/post/decision-diagrams/","publishdate":"2021-01-26T13:16:32Z","relpermalink":"/post/decision-diagrams/","section":"post","summary":"I stumbled across Binary Decision Diagrams (BDDs) by chance. They are an efficient data structure to represent sets of graphs. While a graph $G$ is a set of vertices $V$ along with a set of edges $E$ that connect the vertices, a graph set is a collection of subgraphs over the universe $V$.","tags":["optimization","graph theory"],"title":"Zero-Suppressed Decision Diagrams and Independent Sets","type":"post"},{"authors":["RA Cahill","DF O’shea","MF Khan","HA Khokhar","JP Epperlein","PG Mac Aonghusa","R Nair","SM Zhuk"],"categories":[],"content":"","date":1609459200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1635260629,"objectID":"42ca151f5022affad35003131abc87b7","permalink":"https://rahulnair23.github.io/publication/cahill-2021-artificial/","publishdate":"2021-10-26T14:44:07.167807Z","relpermalink":"/publication/cahill-2021-artificial/","section":"publication","summary":"Classification of tissue based on near infrared imaging of flow of dyes","tags":[],"title":"Artificial intelligence indocyanine green (ICG) perfusion for colorectal cancer intra-operative tissue classification","type":"publication"},{"authors":["Chungmok Lee","Rahul Nair"],"categories":[],"content":"","date":1609459200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1635260629,"objectID":"2f2ab51e89b26fa4fa00f89a7ec14dd0","permalink":"https://rahulnair23.github.io/publication/lee-2021-robust/","publishdate":"2021-10-26T14:44:10.805147Z","relpermalink":"/publication/lee-2021-robust/","section":"publication","summary":"Line planning with demand range estimates","tags":[],"title":"Robust transit line planning based on demand estimates obtained from mobile phones","type":"publication"},{"authors":["Elizabeth M Daly","Massimiliano Mattetti","Öznur Alkan","Rahul Nair"],"categories":[],"content":"","date":1609459200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1635260629,"objectID":"24124c7848ef37a8d65d8d24b1e38014","permalink":"https://rahulnair23.github.io/publication/daly-2021-user/","publishdate":"2021-10-26T14:44:11.860335Z","relpermalink":"/publication/daly-2021-user/","section":"publication","summary":"ML systems that allow users to adjust decision boundaries","tags":[],"title":"User Driven Model Adjustment via Boolean Rule Explanations","type":"publication"},{"authors":["Rahul Nair","Massimiliano Mattetti","Elizabeth Daly","Dennis Wei","Öznur Alkan","Yunfeng Zhang"],"categories":[],"content":"","date":1609459200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1635260629,"objectID":"7eda31db7d9ec38ca8ea285cff29facc","permalink":"https://rahulnair23.github.io/publication/nair-2021-changed/","publishdate":"2021-10-26T14:44:12.476701Z","relpermalink":"/publication/nair-2021-changed/","section":"publication","summary":"Addresses the problem of distinguishing two machine learning (ML) models built for the same task in a human-interpretable way","tags":[],"title":"What Changed? Interpretable Model Comparison","type":"publication"},{"authors":[],"categories":[],"content":"So you think you need CPLEX? To find out more, you review the marketing material. After you wade past that you get to the technical documentation. The links lead you in loops. Where should you start? Is it the decision optimization, pip package, or is it this pip package, or the product documentation?\nAfter a while, you realize CPLEX has not just one Python API, but two. There is the the legacy stuff and then the API that also allows for modeling called DOcplex.\nA pip install cplex seems to get you a solver - but only the Community Edition that allows very small problems. If you need to solve larger problems or need more compute, you could use the Watson Studio to run experiments on the cloud. Watson doesn\u0026rsquo;t call CPLEX CPLEX of course, but Decision Optimization. To get the full version locally, you need the CPLEX Optimization Studio. The docs also point to a dedicated cloud service, but this appears to have been sunset.\nTaps and streams CPLEX has been around since 1988. I first used CPLEX through the academic initiative that IBM runs - granting unrestricted licenses for users at academic institutions. All you needed was a .edu email address and you were good to go. It seems to have go through a winding road since.\nSoftware is only worth it if the problem they solve is repeatable. CPLEX certainly is in that bucket. Over time, mature software products devolve into a complex mesh of functionality, versions, and modes. You know a product has been around a while if you see a matrix! This is partly driven by the business which is fond of putting taps on a stream. Clients may have new uses that need new functions. And product teams have competition that drives some of this.\nIn all this, the cloud increasingly seems like a barrier. Devs (and plebs) are spending considerable amounts of time to get at the technical realities, and once there, playing whack-a-mole for a reality that shifts over time.\n","date":1603791648,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1611666918,"objectID":"3f1b87ab6ee1cc585e4c79fb36aa935c","permalink":"https://rahulnair23.github.io/post/cplex-barrier/","publishdate":"2020-10-27T09:40:48Z","relpermalink":"/post/cplex-barrier/","section":"post","summary":"So you think you need CPLEX? To find out more, you review the marketing material. After you wade past that you get to the technical documentation. The links lead you in loops.","tags":[],"title":"Barriers to the CPLEX","type":"post"},{"authors":[],"categories":[],"content":"Suppose you have a list of objects that you need to iterate over two consecutive items at a time.\nAn old stackoverflow question for this leads to the a quote from the documentation that reads:\nThis makes possible an idiom for clustering a data series into n-length groups using zip(*[iter(s)]*n).\nSo the solution would be:\nk = [1, 2, 3, 4, 5, 6] list(zip(*[iter(k)]*2)) # [(1, 2), (3, 4), (5, 6)] That is cryptic! Let\u0026rsquo;s break it down to understand why this works.\nLet\u0026rsquo;s start with the inner most bit. iter simply returns an iterator object. For lists we would normally just write for x in alist to iterate over the list, but under the hood an iterator is defined with each loop fetching the next item using a next call. \u0026gt;\u0026gt;\u0026gt; iter(k) \u0026lt;list_iterator object at 0x7fcf654c9f28\u0026gt; Next we consider [iter(k)]*2 - the multiplication here creates a shallow copy of the list. \u0026gt;\u0026gt;\u0026gt; [iter(k)] * 2 [\u0026lt;list_iterator object at 0x7fcf654c9f28\u0026gt;, \u0026lt;list_iterator object at 0x7fcf654c9f28\u0026gt;] The star operator * then unpacks the collection as positional arguments to a function which is zip in this case. zip is a handy tool to merge several iterable together. \u0026gt;\u0026gt;\u0026gt; zip(*[iter(k)] * 2) \u0026lt;zip object at 0x7fcf654de808\u0026gt; Finally, the list operator just runs through to generate the entire list, giving us the desired output. \u0026gt;\u0026gt;\u0026gt; list(zip(*[iter(k)] * 2)) [(1, 2), (3, 4), (5, 6)] What\u0026rsquo;s strange about all this is that it depends on subtle behaviours of the underlying methods. For example, instead of zip(*[iter(k)] * 2) you wrote list(zip(*[iter(k), iter(k)])). You will end up with a different result. The solution depends on the iterators being a shallow copy! Each time any of the iterator is hit, it calls the next call to the function.\nShow, don\u0026rsquo;t tell I\u0026rsquo;d hate to encounter snippets like this in the wild as it places significant cognitive load on people trying to read this. Strange it was included in the official 2.x documentation, thankfully removed from the current versions.\n","date":1597925800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1597929195,"objectID":"167dfe6b38b8eb81af9aa439dcb1206c","permalink":"https://rahulnair23.github.io/post/oh-python/","publishdate":"2020-08-20T13:16:40+01:00","relpermalink":"/post/oh-python/","section":"post","summary":"Suppose you have a list of objects that you need to iterate over two consecutive items at a time.\nAn old stackoverflow question for this leads to the a quote from the documentation that reads:","tags":["python"],"title":"Oh Python","type":"post"},{"authors":[],"categories":[],"content":"A 4.2 kilometre road cuts the 2000 acres of Phoenix Park neatly in half. Chesterfield Avenue doesn\u0026rsquo;t have a single pedestrian crossing, yield sign, or any amenity that isn\u0026rsquo;t designed for the car. During regular times, two lanes for the entire length serve as a parking lot. Throughout the park, pedestrians and cyclists have to stop and yield to passing cars. Its a strange hierarchy of movement to have within a park.\nA pandemic-induced change saw the Office of Public Works (OPW) designate two lanes as cycle-only and closure of peripheral gates to vehicles - both steps that brought some measure of traffic calm. The new minister, in opposition to his own department by all accounts, reversed one of these decisions and so its back being a thoroughfare.\nIn all their public communication on why that is, a theme that stands out is their consideration for \u0026ldquo;An Garda Síochána and other key stakeholders\u0026rdquo;. In addition to being the largest walled park in Europe, the park is also home to several institutions. The residence of the Irish president and the U.S. Ambassador, the police headquarters, a hospital, a school, the zoo, cricket clubs, a polo ground, a visitor\u0026rsquo;s center, a nursing home, the Ordinance Survey of Ireland, several gatekeeper houses - some vacant, and a disused fort.\nSo OPW, it would seem in public, is balancing institutional needs with those of the general public. All this takes me to another place and another time.\nThe People\u0026rsquo;s Park Hot and humid air welcome those arriving at Chennai Terminal train station. As transit planners the world over have trouble connecting dots, the nearest suburban train station is a short trek away in Park Station. For a long time, it was a bit of mystery to me why it was called Park Station as all around it was concrete and asphalt.\nThat sector of Chennai was the centre of British colonial power who built Fort St. George around the corner. So not to different from Phoenix park really. It was smaller of course, a mere tenth of its Dublin cousin.\nWhat started in 1859 as a 22 acre park with several ponds and green spaces, slowly morphed in the century to follow. It grew to be as large as 112 acres at one point. The city council took over the park in 1866. Several acres were carved out in 1886 for the Victoria Public Hall - built to commemorate Queen Victoria\u0026rsquo;s golden jubilee.\nThe Victoria Public Hall that was built on the park ~1888 (source) Then there were stadiums and sports clubs followed by a convenient fire in 1985 that was the final nail. The small part of the park that does remain is virtually inaccessible by the public and in neglect.\nSo there you have it - a train station named after something that no longer exists. A cautionary tale on when government agencies serve each other rather than the general public. For Dublin, one can only hope that the 14 kilometre wall that keeps the deer in, keeps institutional needs out.\n","date":1594237997,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1596718765,"objectID":"1c644ec04b510e626eb419374c547b32","permalink":"https://rahulnair23.github.io/post/on-parks/","publishdate":"2020-07-08T20:53:17+01:00","relpermalink":"/post/on-parks/","section":"post","summary":"A 4.2 kilometre road cuts the 2000 acres of Phoenix Park neatly in half. Chesterfield Avenue doesn\u0026rsquo;t have a single pedestrian crossing, yield sign, or any amenity that isn\u0026rsquo;t designed for the car.","tags":["urban parks","public amenities"],"title":"Urban parks","type":"post"},{"authors":[],"categories":[],"content":"In this post, I\u0026rsquo;ll review a paper from 2018 that deals with generating boolean decision rules and uses column generation. The paper is well worth the read if you are interested in explainable AI models. The work also won the FICO explainability challenge by applying this method to data from the financial services sector.\nSetting Algorithmic decisions - ones where you rely on machines to reach a conclusion - require justification. Why was my loan approval denied? Why was the scan result classified as cancerous? In these and several other critical sectors, simply stating the prediction of a AI system is not enough. The underlying rationale of \u0026ldquo;why\u0026rdquo; is equally important.\nSeveral methods seek to come up with the justification algorithmically (in a field called Explainable AI) and several methods exist that can be distinguished along several dimensions. The main one is scope. The global methods look to explain the entire model, i.e. how does the model behave? This contrasts with local methods that look to explain a single instance, i.e. why was my loan not approved?\nWhen the models are complex, as is often the case, a popular class of methods are surrogate models. The basic goal here is to build a simpler (e.g. linear) version of a complex model, then look to interpret the simpler model in ways we humans can understand. When built for local explanations, these probe the neighborhood of test instance to build a surrogate of the complex model.\nUnfortunately, it is hard to be objective when it comes to explanations. In practice, different methods will result in vastly different explanations for the same instance on the same underlying (complex) model. For minor changes in training samples or an adjustment of parameters, even the same method can give you very different results. Fundamentally, these approaches are limited by design. If you prescribe to the view that a machine learning (ML) model is all but a lossy compressed view on the data, then surrogate models are a lossy compressed view of the ML model. Significant challenges remain in practical deployments.\nAn alternative view, the one described in the paper, is one where the model is directly interpretable. A directly interpretable model is one that can be understood by humans. There are of course, several models like decision trees that fall in this category.\nThe problem Consider a supervised binary classification task. You are given $(X_i, y_i)$ for observations $i = 1,\u0026hellip;, n$, where $X_i$ is the set of features associated with observation $i$ and $y_i$ is the binary outcome label. The task is to build a boolean classifier $\\hat{y}(\\mathbf{x})$ that can be stated as\nif (condition) then (predict True) else (predict False) where (condition) is of a specific form called a Disjunctive Normal Form (DNF). DNF clauses are OR of ANDs. A DNF clause on when to drink beer would be (mood=HAPPY AND inventory\u0026gt;0) OR (mood=SAD AND inventory\u0026gt;0) OR (temp\u0026gt;15°C).\nFor a dataset there are exponentially many such clauses involving its features. The challenge is to find a relatively compact subset that provides the best prediction accuracy. The condition needs to be compact as overly complex clauses are not interpretable.\nThe model The paper formulates the search for these clauses as a mixed-integer programming problem.\n$P$ denotes the set of positive samples, i.e. the observations where $y_i = 1$ and $Z$ denote negative ones. All features in $X_i$ are assumed to be binary valued. This isn\u0026rsquo;t too restrictive, continuous and categorical data can be encoded this way. There is $K$ a set of (exponentially many) clauses involving features of $X$ and $K_i, K_i\\subseteq K$ is the subset of clauses satisfied by observation $i$.\nThere are two decision variables. First is $w_k$ (for all $k$ in set $K$) - a binary variable on if clause $k$ is selected for the model. Each clause $k$ in $K$ has an associated complexity $c_k$. The second is $\\xi_i$ defined for $i \\in P$ (i.e. for all positive samples) denotes all samples that are classified incorrectly.\nThe objective looks to minimize Hamming loss which is the fraction of misclassified samples. Specifically, this can be written as\n$$ \\min_{\\xi, w} \\color{blue}\\underbrace{\\color{black}\\sum_{i\\in P} \\xi_i}{\\text{false negatives}} {\\color{black}+} \\color{blue}\\underbrace{\\color{black}\\sum{i\\in Z}\\sum_{k\\in K_i} w_k}_{\\text{false positives}} $$\nFalse positives add more than \u0026ldquo;one unit\u0026rdquo; if multiple clauses are satisfied. This is\n$$\\begin{aligned} \\mbox{s.t.} \\qquad \u0026amp; \\xi_i + \\sum_{k\\in K_i} w_k \\ge 1 \\qquad \\xi_i \\ge 0, \\qquad i\\in P \\\\ \u0026amp; \\sum_{k\\in K} c_k w_k \\le C \\\\ \u0026amp; w_k \\in \\{0, 1\\} \\qquad \\forall k\\in K \\end{aligned} $$\nThe first constraint looks to identify false negatives. It basically says, for each positive sample, either chalk up a false negative ($\\xi_i$) or include a rule that correctly represents this observation (i.e. a clause from the set $K_i$). The second constraint simply bounds the total complexity of the selected rule set to a parameter $C$.\nThe overall problem still remains however, the set $K$ is very large and we\u0026rsquo;d like to avoid having to generate the entire set. This mainly because, it is expensive to generate and solve for all $K$. In any case, only a few $w_k$ will be selected in the final solution, so it makes sense to only look at clauses as needed.\nIn the maximum clique post earlier, this type of exponential growth was addressed using constraint generation. In this work, they follow a column generation procedure - one of generating new variables ($w_k$) as needed. Adding rows and columns to a optimization program are strongly coupled topics. Adding a constraint (row) to a program is the same as adding a variable (column) to its dual.\nThe pricing problem Now to the problem of generating new conjunctive clauses. The sub-problem looks to find the missing clause with the highest reduced cost, i.e. the clause that has the greatest impact on the objective function. This is a heuristic selection and you may have to undo a selection at a later step. But if no missing clause with a negative reduced cost can be found, the procedure terminates with the optimal solution.\nA bit more notation. From the program above, take $\\mu_i$ to be the dual variables associated with the first constraint, and $\\lambda$ be the dual variable for the complexity constraint. Define two sets of decision variables $\\delta_i$ for all observations $i$ and $z_j$ if feature $j\\in J$ is selected in missing constraint. Additionally denote $S_i$ to be a set of zero valued features for sample $i$.\nArmed with this, the sub-problem to identify a clause to include (with the greatest negative reduce cost) can be formulated as:\n$$ \\min_{\\delta, z} \\color{blue}\\underbrace{\\color{black}\\lambda\\left(1+\\sum_{j\\in J}z_j\\right)}{\\substack{\\text{complexity of new rule}\\\\\\text{in terms of features selected}}} {\\color{black}-} \\color{blue}\\underbrace{\\color{black}\\sum{i\\in P} \\mu_i \\delta_i}{\\substack{\\text{how much the new rule}\\\\\\text{improves false negatives}}}{\\color{black}+} \\color{blue}\\underbrace{\\color{black}\\sum{i\\in Z} \\delta_i}_{\\substack{\\text{how much the new rule}\\\\\\text{hurts false positives}}} $$\n$$\\begin{aligned} \\mbox{s.t.} \\qquad \u0026amp; \\delta_i + z_j\\le 1 \\qquad j\\in S_i, \\qquad i\\in P \\\\ \u0026amp; \\delta_i \\ge 1- \\sum_{j\\in S_i} z_j \\qquad \\delta_i\\ge 0 \\qquad i\\in Z\\\\ \u0026amp; \\sum_{j\\in J} z_j \\le D \\\\ \u0026amp; z_j \\in \\{0, 1\\} \\qquad \\forall j\\in J \\end{aligned} $$\nThe first constraint here says every zero-valued feature in every positive sample - the feature is either selected or the sample satisfies the clause. The next constraint states that the $i$-th negative sample is covered only if no zero-valued feature is selected. The next constraint bounds the complexity and the feature selection variables are restricted to be binary.\nConclusions The method appears to be well suited for transactional-type data, where there are some underlying rules (e.g. a business process) that generates the training data. I leave you with an interesting example. The tic-tac-toe dataset contains all possible board configurations at the end of a tic-tac-toe game and the outcome (if x won or not). The method extracts almost all the rules of the game based on just this data, just missing the diagonal cases. Some of the rules extracted are superfluous.\nRules extracted from tic-tac-toe data As with all things, the approach comes with some limitations. There is a complexity-accuracy tradeoff, expect classifier accuracy to drop. Although in my experiments this was not substantial. The clauses generated are sensitive to the parameter $C$. If you don\u0026rsquo;t have a mechanism to validate the rule set then it is difficult to tune. The method doesn\u0026rsquo;t deal with class-imbalance, so you would need to under/over-sample to get a balanced sample. It would also worthwhile to study clauses generated in the presence of highly correlated features. I expect one of the correlated features to be picked arbitrarily.\nResources A modified implementation of the model is available through the AIX360 toolkit, so you can try it yourself. The differences are documented in another paper. Mainly, it uses a beam search heuristic instead of the pricing problem. Additionally, the complexity clauses are handled through two regularization terms, rather than a constraint.\n","date":1592300772,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1593011846,"objectID":"d8ed4442ad6964b17226cdb2f951c022","permalink":"https://rahulnair23.github.io/post/boolean-rules/","publishdate":"2020-06-16T10:46:12+01:00","relpermalink":"/post/boolean-rules/","section":"post","summary":"In this post, I\u0026rsquo;ll review a paper from 2018 that deals with generating boolean decision rules and uses column generation. The paper is well worth the read if you are interested in explainable AI models.","tags":["explainability","AIX360","boolean decision rules","column generation","mixed integer programming"],"title":"Model explanations via column generation","type":"post"},{"authors":[],"categories":[],"content":"Recently, I had the need to compute maximum weighted cliques on very dense large graphs. This is a well studied problem, and a nice survey paper from 90\u0026rsquo;s by Pardalos and Xue gives a good overview of approaches.\nThe problem We are given a graph $G = (V, E)$ which is a set of vertices $V$ and edges $E$. Each vertex has an associated weight $d_i, \\forall i\\in V$. A clique $C$ is a subset of vertices, where all vertices are pairwise connected. A maximum clique is a clique that has largest weight.\nA related notion is of an independent set, which is a subset of vertices $V$ that are pairwise disconnected. A maximum independent set is similarly an independent set with the largest weight.\nSolutions For general graphs, finding the maximum cliques is a hard problem (NP-complete). An integer programming approach that involves edges can be written as:\n$$\\begin{aligned} \\max_x \u0026amp; \\sum_{i\\in V} d_i x_{i}\\\\ \\mbox{s.t.} \\qquad \u0026amp; x_i + x_j \\le 1 \\quad \\forall (i, j) \\in \\bar{E} \\\\ \u0026amp; x_i \\in {0, 1} \\qquad \\forall i\\in V \\end{aligned} $$\nwhere $\\bar{E}$ is called the complement edge set that is a set of edges that are missing from the original graph $G$. All the constraint $x_i + x_j \\le 1$ says is if the edge $(i, j)$ is missing then only one node, either $i$ or $j$, can be in the clique. The objective seeks to maximize the weighted of selected nodes.\nAs pointed out in the paper this formulation isn\u0026rsquo;t useful in practice on account of two problems. First, the linear relaxation, one where the integrality constraints $x_i \\in {0, 1}$ is omitted, gives a poor bound. The second is on account of symmetry. Symmetry arises in this context as vertices with the same weight are indistinguishable. So several configurations result in the same optimal solution. Why is this bad? The branch and cut tree cannot prune the search tree as solutions are in various parts of it. One way to remove symmetry is to do lexicographical ordering. An arbitrary order is imposed via additional constraints that cuts of several optimal solutions knowing that at least one optimal solution is valid. There are other methods as well, such as isomorphic pruning, and orbitopal fixing, but we won\u0026rsquo;t get into those here.\nAn alternative formulation The notion of the complement edge set $\\bar{E}$ can be strengthened using independent sets. If you know an independent set, a clique can contain at most one vertex from such a set. To write this as a constraint, one would need to consider maximum independent sets, lest you allow the omitted vertices to be included in the clique. Further, you would need to look at all maximum independent sets that arise in $G$. Assume for a moment that the set of maximum independent sets $\\mathbb{S}$ is known. Then the problem of finding the maximum weighted clique can be written as\n$$\\begin{aligned} \\max_x \u0026amp; \\sum_{i\\in V} d_i x_{i}\\\\ \\mbox{s.t.} \\qquad \u0026amp; \\sum_{i\\in I} x_i \\le 1 \\quad \\forall I \\in \\mathbb{S} \\\\ \u0026amp; x_i \\in {0, 1} \\qquad \\forall i\\in V \\end{aligned} $$\nThe objective is the same as before - maximize the total weight of selected nodes. The constraints, one for each maximum independent set, allows only one vertex into the solution. The constraints are tighter than the previous formulation implying that the linear relaxation gives a better bound. For some classes of graphs, namely perfect graphs, omitting the integrality constraints will directly give you integral solutions! The problem however is that there are now an exponential number of constraints (set $\\mathbb{S}$ is very large).\nOne mechanism to deal with too many constraints is use lazy constraints. The idea is to start the optimization with a small set of constraints and then add relevant constraints from the large pool as you go along. The prerequisite is however that such relevant constraints can be generated efficiently.\nHow would this work? A sketch of the solution algorithm looks like this.\nUse a heuristic procedure to generate a set of maximum independent sets ($S$) Solve a linear relaxation on this limited set ($S \\subseteq \\mathbb{S}$) Based on solution, identify new maximum independent sets that would cut the current solution If no such sets exists, we are done (current solution gives the maximum weighted clique) If there are, then add to the constraints and goto step 2. Reference implementation To test this, we use the networkx library for graphs and the CPLEX solver. We use one of the many generators for a test graph with a known number of cliques.\nfrom networkx import nx G = nx.generators.ring_of_cliques(6, 3) nx.draw(G, with_labels=True) gives you this:\nAn test graph with known max cliques (Step 1) Generating maximum independent sets Here we use the greedy heuristic implementation as shown in this blog:\ndef greedy_init(G): \u0026quot;\u0026quot;\u0026quot; https://kmutya.github.io/maxclique/ \u0026quot;\u0026quot;\u0026quot; n = G.number_of_nodes() # Storing total number of nodes in 'n' max_ind_sets = [] # initializing a list that will store maximum independent sets for j in G.nodes: R = G.copy() # Storing a copy of the graph as a residual neigh = [n for n in R.neighbors(j)] # Catch all the neighbours of j R.remove_node(j) # removing the node we start from iset = [j] R.remove_nodes_from(neigh) # Removing the neighbours of j if R.number_of_nodes() != 0: x = get_min_degree_vertex(R) while R.number_of_nodes() != 0: neigh2 = [m for m in R.neighbors(x)] R.remove_node(x) iset.append(x) R.remove_nodes_from(neigh2) if R.number_of_nodes() != 0: x = get_min_degree_vertex(R) max_ind_sets.append(iset) return(max_ind_sets) def get_min_degree_vertex(Residual_graph): '''Takes in the residual graph R and returns the node with the lowest degree''' degrees = [val for (node, val) in Residual_graph.degree()] node = [node for (node, val) in Residual_graph.degree()] node_degree = dict(zip(node, degrees)) return (min(node_degree, key=node_degree.get)) (Step 2) The optimization model Now we define the optimization model as a linear program using the CPLEX python API. We initialize the set of constraints based on the greedy heuristic.\nimport cplex prob = cplex.Cplex() numvar = len(G.nodes) def func(x): return \u0026quot;x\u0026quot;+str(x) names = list(map(func, G.nodes)) var_type = [prob.variables.type.continuous] * numvar prob.variables.add(names=names, lb=[0.0] * numvar, ub=[1.0] * numvar, types=var_type) prob.objective.set_sense(prob.objective.sense.maximize) prob.objective.set_linear([(n, 1.0) for n in names]) lhs = [] # Call the greedy heuristic to generate a starting set of independent sets mis = greedy_init(G) for iset in mis: con_vars = [func(i) for i in iset] coeffs = [1.0] * len(con_vars) lhs.append(cplex.SparsePair(con_vars, coeffs)) prob.linear_constraints.add(lin_expr=lhs, rhs=[1.0] * len(lhs), senses=['L'] * len(lhs)) print(\u0026quot;Constraint: Maximum independent set. ({} constraints)\u0026quot;.format(len(mis))) To solve this model, we would use the following snippet to execute the model and return the final solution.\nprob.solve() status = prob.solution.status[prob.solution.get_status()] print(\u0026quot;Status:{}\u0026quot;.format(status)) if prob.solution.get_status() in [101, 105, 107, 111, 113]: # Optimal/feasible, so get the solution print(\u0026quot;Solution value: \u0026quot;) print(prob.solution.get_objective_value()) # get the configuration x_res = prob.solution.get_values(names) for x_name, val in zip(names, x_res): if val \u0026gt; 0: print(x_name, val) (Step 3) Generate lazy constraints We\u0026rsquo;ve not managed the lazy constraints yet. To do this we will use a CPLEX Callback. The LazyConstraintCallback is called each time an optimal or integral solution is found. The implementation looks like this.\nTo find new independent sets, we take the solution (potentially fractional) and use a greedy heuristic to first generate an independent set on the induced subgraph of the solution. We then expand on the independent set for the entire graph using another greedy_expand procedure which uses the same logic as greedy_init to grown the independent set.\nIf there are no additional independent sets, no constraints are added and the solver terminates.\nclass LazyCallback(LazyConstraintCallback): \u0026quot;\u0026quot;\u0026quot;Lazy constraint callback to generate maximum independent sets on the fly. There are too many such constraints to make them all available to CPLEX right away - and in any case, very few of them are valid. So generate them on the fly. \u0026quot;\u0026quot;\u0026quot; # Callback constructor. # # Any needed fields are set externally after registering the callback. def __init__(self, env): super().__init__(env) def __call__(self): values = self.get_values(self.names) # Any node with non-zero value is considered as part of the set curr_solution = [int(name[1:]) for name, val in zip(self.names, values) if val \u0026gt;= 0.001] print(\u0026quot;Current solution: \u0026quot;, curr_solution) # Look to generate all independent sets that would cut off the (fractional) # value. To do this, first induce a subgraph - and for each node, built a # subG = self.G.subgraph(curr_solution) sub_ind_set = greedy_init(subG) max_ind_sets = [greedy_expand(self.G, sset) for sset in sub_ind_set] for iset in max_ind_sets: con_vars = [func(i) for i in iset] coeffs = [1.0] * len(con_vars) lhs = cplex.SparsePair(con_vars, coeffs) self.add(constraint=lhs, rhs=1.0, sense='L') The callback must be registered with the problem instance and any variables passed as attributes as so:\nfrom cplex.callbacks import LazyConstraintCallback # register callbacks to generate additional independent sets on the fly lazycb = prob.register_callback(LazyCallback) # pass any arguments as class attributes lazycb.names = names lazycb.G = G For completeness, here is what the greedy_expand function does\ndef greedy_expand(G, init_set): R = G.copy() neigh = [n for i in init_set for n in R.neighbors(i)] R.remove_nodes_from(init_set) R.remove_nodes_from(neigh) if R.number_of_nodes() != 0: x = get_min_degree_vertex(R) while R.number_of_nodes() != 0: neigh2 = [m for m in R.neighbors(x)] R.remove_node(x) init_set.append(x) R.remove_nodes_from(neigh2) if R.number_of_nodes() != 0: x = get_min_degree_vertex(R) return init_set Putting it all together Running this all together as shown in this gist gives the following output:\nConstraint: Maximum independent set. (18 constraints) Version identifier: 12.10.0.0 | 2019-11-26 | 843d4de CPXPARAM_Read_DataCheck 1 Warning: Control callbacks may disable some MIP features. Lazy constraint(s) or lazy constraint/branch callback is present. Disabling dual reductions (CPX_PARAM_REDUCE) in presolve. Disabling non-linear reductions (CPX_PARAM_PRELINEAR) in presolve. Disabling presolve reductions that prevent crushing forms. Disabling repeat represolve because of lazy constraint/incumbent callback. Tried aggregator 1 time. MIP Presolve eliminated 6 rows and 0 columns. Reduced MIP has 12 rows, 18 columns, and 72 nonzeros. Reduced MIP has 0 binaries, 0 generals, 0 SOSs, and 0 indicators. Presolve time = 0.00 sec. (0.02 ticks) MIP emphasis: balance optimality and feasibility. MIP search method: traditional branch-and-cut. Parallel mode: none, using 1 thread. Root relaxation solution time = 0.00 sec. (0.01 ticks) Current solution: [5, 7, 8, 14, 16, 17] Current solution: [4, 10, 11, 13] Current solution: [0, 6, 8, 10, 11] Current solution: [4, 6, 8, 10, 11, 16] Current solution: [0, 2, 4, 5, 6, 8] Current solution: [6, 7, 8] Current solution: [6, 7, 8] Nodes Cuts/ Node Left Objective IInf Best Integer Best Bound ItCnt Gap Variable B NodeID Parent Depth * 0 0 integral 0 3.0000 6.0000 8 100.00% 0 0 Elapsed time = 0.02 sec. (0.16 ticks, tree = 0.00 MB, solutions = 1) User cuts applied: 17 Root node processing (before b\u0026amp;c): Real time = 0.02 sec. (0.16 ticks) Sequential b\u0026amp;c: Real time = 0.00 sec. (0.00 ticks) ------------ Total (root+branch\u0026amp;cut) = 0.02 sec. (0.16 ticks) Status:MIP_optimal Solution value: 3.0 x6 1.0 x7 1.0 x8 1.0 This identified one of the 3-vertex cliques, which is the maximum. The program started with 18 maximum independent sets generated greedily. It generated a further 17 user cuts one for each new independent set that were constructed on the fly. For a graph with $n$ nodes, there can be at most $3^{n/3}$ maximum independent sets although most have far fewer. For our 18 node graph, that would be 729 sets. In this greedy solution method, we got away with generating just 35.\n","date":1591350299,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1593011846,"objectID":"84e62885cc885b92f01c70331bc9342a","permalink":"https://rahulnair23.github.io/post/max-clique/","publishdate":"2020-06-05T10:44:59+01:00","relpermalink":"/post/max-clique/","section":"post","summary":"Recently, I had the need to compute maximum weighted cliques on very dense large graphs. This is a well studied problem, and a nice survey paper from 90\u0026rsquo;s by Pardalos and Xue gives a good overview of approaches.","tags":["optimization","graph theory","lazy constraints"],"title":"Maximum weighted cliques in a graph","type":"post"},{"authors":["Sergiy Zhuk","Jonathan P Epperlein","Rahul Nair","Seshu Thirupati","Pol Mac Aonghusa","Ronan Cahill","Donal O'Shea"],"categories":[],"content":"","date":1585699200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1598006701,"objectID":"53f64aa71ad2e41d1d5e742bf18dc62b","permalink":"https://rahulnair23.github.io/publication/zhuk-2020-perfusion/","publishdate":"2020-08-21T09:43:13.374296Z","relpermalink":"/publication/zhuk-2020-perfusion/","section":"publication","summary":"Describes methods for interoperative decision support during endoscopies.","tags":["cancer","video","classification"],"title":"Perfusion Quantification from Endoscopic Videos: Learning to Read Tumor Signatures","type":"publication"},{"authors":["Josh Andres","Christine T Wolf","Sergio Cabrero Barros","Erick Oduor","Rahul Nair","Alexander Kjærum","Anders Bech Tharsgaard","Bo Schwartz Madsen"],"categories":[],"content":"","date":1585699200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1598006701,"objectID":"9543d9645ed7e8b003481809d9388856","permalink":"https://rahulnair23.github.io/publication/andres-2020-scenario/","publishdate":"2020-08-21T09:43:13.279135Z","relpermalink":"/publication/andres-2020-scenario/","section":"publication","summary":"One domain application of artificial intelligence (AI) systems is humanitarian aid planning, where dynamically changing societal conditions need to be monitored and analyzed, so humanitarian organizations can coordinate efforts and appropriately support forcibly displaced peoples. Essential in facilitating effective human-AI collaboration is the explainability of AI system outputs (XAI). This late-breaking work presents an ongoing industrial research project aimed at designing, building, and implementing an XAI system for humanitarian aid planning. We draw on empirical data from our project and define current and future scenarios of use, adopting a scenario-based XAI design approach. These scenarios surface three central themes which shape human-AI collaboration in humanitarian aid planning: (1) Surfacing Causality, (2) Multifaceted Trust \u0026 Lack of Data Quality, (3) Balancing Risky Situations. We explore each theme and in doing so, further our understanding of how humanitarian aid planners can partner with AI systems to better support forcibly displaced peoples.","tags":["HCI","displacement","explainability"],"title":"Scenario-based XAI for Humanitarian Aid Forecasting","type":"publication"},{"authors":["Rahul Nair","Anton Dekusar"],"categories":[],"content":"","date":1577836800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1598006701,"objectID":"6007213cc15d6bce7f8fd0a98ffb76b3","permalink":"https://rahulnair23.github.io/publication/nair-2020-keep/","publishdate":"2020-08-21T09:43:13.085705Z","relpermalink":"/publication/nair-2020-keep/","section":"publication","summary":"The approach taken by the second place winner of the TRANSFOR prediction challenge is presented. The challenge involves forecasting travel speeds on two arterial links in Xi’an City in China for two five hour periods on a single day. Travel speeds are measured from trajectory information on probe vehicles from a fleet of vehicles for a large sub-area of the city. After experimenting with several deep learning methods, we settle on a simple non-parametric kernel regression approach. The method, borrowed from previous work in fixed route transit predictions, formalizes the intuition that in urban systems most failure patterns are recurrent. Our choice is supported by test results where the method outperformed all evaluated neural architectures. The results suggest simple methods are very competitive, particularly considering the high lifecycle cost of deep learning models.","tags":[],"title":"Keep it simple stupid! A non-parametric kernel regression approach to forecast travel speeds","type":"publication"},{"authors":["Bei Chen","Rahul Nair","Inge Vejsbjerg"],"categories":[],"content":"","date":1573171200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1598006701,"objectID":"04edaf0bd639a54c4ba8f26d83d81d31","permalink":"https://rahulnair23.github.io/publication/chen-2019-rsm/","publishdate":"2020-08-21T09:43:13.183611Z","relpermalink":"/publication/chen-2019-rsm/","section":"publication","summary":"We present Route Selection Model (RSM), an online data-driven sales route selector to help firms decide on how to respond to new business opportunities. The system addresses sales route selection (also known as sales channel selection) to determine if the opportunity can be handled by business partners, within the firm using sales agents on the field, or aim to close remotely using digital sellers. Given a new opportunity, RSM recommends an optimal sales route with the highest win probability predicted by machine learning models and provides explanation by meaningful clauses. Compared to the traditional manual passing approach based on business rules, RSM makes faster and more objective recommendations. Our pilot evaluation study shows our recommendations are not only accurate but also interpretable, which is crucial in business decision making. The main features of RSM are: (1) automatically merges multiple sales databases and produce timely recommendations, (2) allows users to navigate through the opportunity information and evidence which supports the recommendation. In this paper we describe the methodology and demonstrate the main functions of RSM.","tags":[],"title":"RSM: An Explainable Predictive Sales Route Selector","type":"publication"},{"authors":["Rahul Nair","Bo Schwartz Madsen","Helena Lassen","Serge Baduk","Srividya Nagarajan","Lars Henrik Mogensen","Rana Novack","Rebecca Curzon","Jurij Paraszczak","Sanne Urbak"],"categories":[],"content":"","date":1546300800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1598006701,"objectID":"c1d8194bfc5fd4b1562f32f0ff704b29","permalink":"https://rahulnair23.github.io/publication/nair-2019-machine/","publishdate":"2020-08-21T09:43:12.987186Z","relpermalink":"/publication/nair-2019-machine/","section":"publication","summary":"The development of MM4SIGHT, a machine learning system that enables annual forecasts of mixed-migration flows, is presented. Mixed migration refers to cross-border movements of people that are motivated by a multiplicity of factors to move including refugees fleeing persecution and conflict, victims of trafficking, and people seeking better lives and opportunity. Such populations have a range of legal status, some of which are not reflected in official government statistics. The system combines institutional estimates of migration along with in-person monitoring surveys to establish a migration volume baseline. The surveys reveal clusters of migratory drivers of populations on the move. Given macrolevel indicators that reflect migratory drivers found in the surveys, we develop an ensemble model to determine the volume of migration between source and host country along with uncertainty bounds. Using more than 80 macroindicators, we present results from a case study of migratory flows from Ethiopia to six countries. Our evaluations show error rates for annual forecasts to be within a few thousand persons per year for most destinations.","tags":[],"title":"A machine learning approach to scenario analysis and forecasting of mixed migration","type":"publication"},{"authors":["Rahul Nair","Thanh Lam Hoang","Marco Laumanns","Bei Chen","Randall Cogill","Jácint Szabó","Thomas Walter"],"categories":[],"content":"","date":1546300800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1598006701,"objectID":"3d70b5ede1c1be85fdf3b684f1040618","permalink":"https://rahulnair23.github.io/publication/nair-2019-ensemble/","publishdate":"2020-08-21T09:43:12.711624Z","relpermalink":"/publication/nair-2019-ensemble/","section":"publication","summary":"A large-scale ensemble prediction model to predict train delays is presented. The ensemble model uses a disparate set of models, two statistical and one simulation-based to generate forecasts of train delays. The first statistical model is a context-aware random forest that accounts for network traffic states, such as likely stretch conflicts and current headway’s, exogenous weather, event, and work zone information. The second model is a kernel regression that captures train-specific dynamics. A mesoscopic simulation model that accounts for travel and dwell time variations as well as inferred track occupation conflicts, train connections and rolling stock rotations, is additionally considered. The models have been used in a proof of concept to forecast delays for nationwide passenger services network of Deutsche Bahn, which operates roughly 25,000 trains daily in Germany. Results demonstrate a 25% improvement potential in forecast correctness (fraction of predictions within one minute) and 50% reduction in root mean squared errors compared to the published schedule. The paper describes the models along with the big data challenges that were addressed in data storage, feature and model building, and computation.","tags":[],"title":"An ensemble prediction model for train delays","type":"publication"},{"authors":["Rahul Nair","Killian Levacher","Martin Stephenson"],"categories":[],"content":"","date":1514764800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1598006701,"objectID":"52293dff77f54c4c5dc617b8791df212","permalink":"https://rahulnair23.github.io/publication/nair-2018-towards/","publishdate":"2020-08-21T09:43:13.578702Z","relpermalink":"/publication/nair-2018-towards/","section":"publication","summary":"","tags":[],"title":"Towards Automated Extraction of Business Constraints from Unstructured Regulatory Text","type":"publication"},{"authors":["Matthias Andres","Rahul Nair"],"categories":[],"content":"","date":1483228800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1598006701,"objectID":"f988865b25d479174032288741a2765a","permalink":"https://rahulnair23.github.io/publication/andres-2017-predictive/","publishdate":"2020-08-21T09:43:13.677413Z","relpermalink":"/publication/andres-2017-predictive/","section":"publication","summary":"","tags":[],"title":"A predictive-control framework to address bus bunching","type":"publication"},{"authors":["Ren Wang","Rahul Nair","Alessandra Pascale","Daniel Work"],"categories":[],"content":"","date":1483228800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1598006701,"objectID":"8813329b5724497bcb93c091241fba4b","permalink":"https://rahulnair23.github.io/publication/wang-2016-spillover/","publishdate":"2020-08-21T09:43:13.774054Z","relpermalink":"/publication/wang-2016-spillover/","section":"publication","summary":"","tags":[],"title":"Spillover detection for urban traffic networks using signal timing and stop line detector data","type":"publication"},{"authors":["Mohammed Ahmed","Gianni Barlacchi","Stefano Braghin","Francesco Calabrese","Michele Ferretti","Vincent Lonij","Rahul Nair","Rana Novack","Jurij Paraszczak","Andeep Toor"],"categories":[],"content":"","date":1451606400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1598006701,"objectID":"cd6edc7244a11f9e6783def9028f6946","permalink":"https://rahulnair23.github.io/publication/mohammed-2016-multiscale/","publishdate":"2020-08-21T09:43:14.161802Z","relpermalink":"/publication/mohammed-2016-multiscale/","section":"publication","summary":"","tags":[],"title":" A multi-scale approach to data-driven mass migration analysis","type":"publication"},{"authors":["Giusy Di Lorenzo","Marco Sbodio","Francesco Calabrese","Michele Berlingerio","Fabio Pinelli","Rahul Nair"],"categories":[],"content":"","date":1451606400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1598006701,"objectID":"e282719be601a09440e73f43cbd319e1","permalink":"https://rahulnair23.github.io/publication/di-2016-allaboard/","publishdate":"2020-08-21T09:43:13.869369Z","relpermalink":"/publication/di-2016-allaboard/","section":"publication","summary":"","tags":[],"title":"Allaboard: visual exploration of cellphone mobility data to optimise public transport","type":"publication"},{"authors":["Fabio Pinelli","Rahul Nair","Francesco Calabrese","Michele Berlingerio","G. Di Lorenzo","Marco Luca Sbodio"],"categories":[],"content":"","date":1451606400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1598006701,"objectID":"4046c3ca4f54986d2b7f924731d76a92","permalink":"https://rahulnair23.github.io/publication/pinelli-2016-data/","publishdate":"2020-08-21T09:43:13.476739Z","relpermalink":"/publication/pinelli-2016-data/","section":"publication","summary":"","tags":[],"title":"Data-Driven Transit Network Design From Mobile Phone Trajectories","type":"publication"},{"authors":["A. Botea","M. Berlingerio","S. Braghin","E. Bouillet","F. Calabrese","B. Chen","Y. Gkoufas","R. Nair"," Nonner","Laumanns, M T."],"categories":[],"content":"","date":1451606400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1598006701,"objectID":"187e11dd1fab8a4d7d76dea7eb0309fc","permalink":"https://rahulnair23.github.io/publication/botea-2016-docit/","publishdate":"2020-08-21T09:43:13.966295Z","relpermalink":"/publication/botea-2016-docit/","section":"publication","summary":"","tags":[],"title":"Docit: an integrated system for risk-averse multimodal journey advising","type":"publication"},{"authors":["A. Pascale","T.L. Hoang","R. Nair"],"categories":[],"content":"","date":1420070400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1598006701,"objectID":"f63ca965fbf84089666d41268b902ab6","permalink":"https://rahulnair23.github.io/publication/pascale-2015-isttt/","publishdate":"2020-08-21T09:43:16.013874Z","relpermalink":"/publication/pascale-2015-isttt/","section":"publication","summary":"","tags":[],"title":"Characterization of network traffic processes under adaptive traffic control systems","type":"publication"},{"authors":["A. Pascale","T.L. Hoang","R. Nair"],"categories":[],"content":"","date":1420070400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1598006701,"objectID":"ea24d734b59299c34908f66d404e4245","permalink":"https://rahulnair23.github.io/publication/pascale-2015-trc/","publishdate":"2020-08-21T09:43:15.91899Z","relpermalink":"/publication/pascale-2015-trc/","section":"publication","summary":"","tags":[],"title":"Characterization of network traffic processes under adaptive traffic control systems","type":"publication"},{"authors":["Nikola Marković","Rahul Nair","Paul Schonfeld","Elise Miller-Hooks","Matthew Mohebbi"],"categories":[],"content":"","date":1420070400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1598006701,"objectID":"e2a70e7b878cc614a9168cb2dffbec62","permalink":"https://rahulnair23.github.io/publication/markovic-2015-optimizing/","publishdate":"2020-08-21T09:43:14.753238Z","relpermalink":"/publication/markovic-2015-optimizing/","section":"publication","summary":"","tags":[],"title":"Optimizing dial-a-ride services in Maryland: Benefits of computerized routing and scheduling","type":"publication"},{"authors":["Marco Luca Sbodio","Francesco Calabrese","Michele Berlingerio","Rahul Nair","Fabio Pinelli"," others"],"categories":[],"content":"","date":1388534400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1598006701,"objectID":"18336311478d85a12304ed1a1f8d994c","permalink":"https://rahulnair23.github.io/publication/sbodio-2014-allaboard/","publishdate":"2020-08-21T09:43:14.853057Z","relpermalink":"/publication/sbodio-2014-allaboard/","section":"publication","summary":"","tags":[],"title":"Allaboard: visual exploration of cellphone mobility data to optimise public transport","type":"publication"},{"authors":["Rahul Nair","Eric Bouillet","Yiannis Gkoufas","Olivier Verscheure","Magda Mourad","Farzin Yashar","Rosie Perez","Joel Perez","Gerald Bryant"],"categories":[],"content":"","date":1388534400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1598006701,"objectID":"c6d6832d132458af246cb83b7c8c2651","permalink":"https://rahulnair23.github.io/publication/nair-2015-data/","publishdate":"2020-08-21T09:43:14.957703Z","relpermalink":"/publication/nair-2015-data/","section":"publication","summary":"","tags":[],"title":"Data as a resource: real-time predictive analytics for bus bunching","type":"publication"},{"authors":["Rahul Nair","Elise Miller-Hooks"],"categories":[],"content":"","date":1388534400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1598006701,"objectID":"80de2c668c7bfceb4cbe110db2365449","permalink":"https://rahulnair23.github.io/publication/nair-2014-equ-dc/","publishdate":"2020-08-21T09:43:16.303221Z","relpermalink":"/publication/nair-2014-equ-dc/","section":"publication","summary":"","tags":["\"Equilibrium network design; Bike sharing; Transit accessibility\""],"title":"Equilibrium design of bicycle sharing systems: the case of Washington D.C.","type":"publication"},{"authors":["Rahul Nair","Elise Miller-Hooks"],"categories":[],"content":"","date":1388534400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1598006701,"objectID":"a6c8d336ad7b6007c6c683638eb93437","permalink":"https://rahulnair23.github.io/publication/nair-2014-equilibrium/","publishdate":"2020-08-21T09:43:14.564359Z","relpermalink":"/publication/nair-2014-equilibrium/","section":"publication","summary":"","tags":[],"title":"Equilibrium network design of shared-vehicle systems","type":"publication"},{"authors":["Freddy Lécué","Robert Tucker","Simone Tallevi-Diotallevi","Rahul Nair","Yiannis Gkoufas","Giuseppe Liguori","Mauro Borioni","Alexandre Rademaker","Luciano Barbosa"],"categories":[],"content":"","date":1388534400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1598006701,"objectID":"1c284d04d33a4b0d611bc230d605e813","permalink":"https://rahulnair23.github.io/publication/lecue-2014-semantic/","publishdate":"2020-08-21T09:43:14.656302Z","relpermalink":"/publication/lecue-2014-semantic/","section":"publication","summary":"","tags":[],"title":"Semantic Traffic Diagnosis with STAR-CITY: Architecture and Lessons Learned from Deployment in Dublin, Bologna, Miami and Rio","type":"publication"},{"authors":["Michele Berlingerio","Francesco Calabrese","Giusy Di Lorenzo","Rahul Nair","Fabio Pinelli","Marco Luca Sbodio"],"categories":[],"content":"","date":1356998400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1598006701,"objectID":"def95f16d7b73e407a11c2b04ea88c5b","permalink":"https://rahulnair23.github.io/publication/berlingerio-2013-allaboard/","publishdate":"2020-08-21T09:43:14.06083Z","relpermalink":"/publication/berlingerio-2013-allaboard/","section":"publication","summary":"","tags":[],"title":"AllAboard: a system for exploring urban mobility and optimizing public transport using cellphone data","type":"publication"},{"authors":["Rahul Nair","Cathal Coffey","Fabio Pinelli","Francesco Calabrese"],"categories":[],"content":"","date":1356998400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1598006701,"objectID":"f5b5c8cd1a7c350110e65ed0360f73e9","permalink":"https://rahulnair23.github.io/publication/nair-2013-trb/","publishdate":"2020-08-21T09:43:14.469943Z","relpermalink":"/publication/nair-2013-trb/","section":"publication","summary":"","tags":[],"title":"Large-scale transit schedule coordination based on journey planner requests","type":"publication"},{"authors":["Rahul Nair","Jonathan Kumi","Kevin Denny","Elise Miller-Hooks"],"categories":[],"content":"","date":1356998400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1598006701,"objectID":"bf455a7208c4adc9ce614f3ea7625aa4","permalink":"https://rahulnair23.github.io/publication/nair-2013-robust/","publishdate":"2020-08-21T09:43:16.881239Z","relpermalink":"/publication/nair-2013-robust/","section":"publication","summary":"","tags":[],"title":"Robust Dynamic Distribution of Security Assets in Transit Systems","type":"publication"},{"authors":["Center for Advanced Transportation Technology"],"categories":[],"content":"","date":1325376000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1598006701,"objectID":"e7d167a1ae0c7a70d21e8858b77b8ff0","permalink":"https://rahulnair23.github.io/publication/sh-amobilityreport/","publishdate":"2020-08-21T09:43:15.054525Z","relpermalink":"/publication/sh-amobilityreport/","section":"publication","summary":"","tags":[],"title":"2012 Maryland State Highway Mobility Report","type":"publication"},{"authors":["R. Nair","H.S. Mahmassani","E. Miller-Hooks"],"categories":[],"content":"","date":1325376000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1598006701,"objectID":"c5d4591bc4ccfaf683c219dbe7df7068","permalink":"https://rahulnair23.github.io/publication/nair-2012-porous/","publishdate":"2020-08-21T09:43:16.781385Z","relpermalink":"/publication/nair-2012-porous/","section":"publication","summary":"","tags":[],"title":"A Porous Flow Model for Disordered Heterogeneous Traffic Streams","type":"publication"},{"authors":["R. Nair","E. Miller-Hooks","R. C. Hampshire","A. Bušić"],"categories":[],"content":"","date":1325376000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1598006701,"objectID":"7d3c47c66bdd7e06cabf505a4a73477d","permalink":"https://rahulnair23.github.io/publication/nair-2012-large/","publishdate":"2020-08-21T09:43:16.107379Z","relpermalink":"/publication/nair-2012-large/","section":"publication","summary":"","tags":[],"title":"Large-Scale Vehicle Sharing Systems: Analysis of Vélib'","type":"publication"},{"authors":["Cathal Coffey","Rahul Nair","Fabio Pinelli","Alexei Pozdnoukhov","Francesco Calabrese"],"categories":[],"content":"","date":1325376000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1598006701,"objectID":"ac655916e056f8f0fdf87b28449e134f","permalink":"https://rahulnair23.github.io/publication/coffey-2012-missed/","publishdate":"2020-08-21T09:43:14.276249Z","relpermalink":"/publication/coffey-2012-missed/","section":"publication","summary":"","tags":[],"title":"Missed connections: quantifying and optimizing multi-modal interconnectivity in cities","type":"publication"},{"authors":["H. Sadrsadat","S. Young","E. Sharifi","R. Nair"],"categories":[],"content":"","date":1325376000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1598006701,"objectID":"3eefb7d25c3ef247022eb4afd75c358b","permalink":"https://rahulnair23.github.io/publication/sadrsadat-2012-relation/","publishdate":"2020-08-21T09:43:16.983549Z","relpermalink":"/publication/sadrsadat-2012-relation/","section":"publication","summary":"","tags":[],"title":"Relation between Real-Time Data and Hourly Traffic Volume Taking Heavy Vehicles into Consideration","type":"publication"},{"authors":["M. Kim","E. Miller-Hooks","R. Nair"],"categories":[],"content":"","date":1293840000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1598006701,"objectID":"fdc1e0631e2daf63068fc54422e9b6f2","permalink":"https://rahulnair23.github.io/publication/kim-2011-geographic/","publishdate":"2020-08-21T09:43:16.403063Z","relpermalink":"/publication/kim-2011-geographic/","section":"publication","summary":"","tags":[],"title":"A Geographic Information System-Based Real-Time Decision Support Framework for Routing Vehicles Carrying Hazardous Materials","type":"publication"},{"authors":["R. Nair","H.S. Mahmassani","E. Miller-Hooks"],"categories":[],"content":"","date":1293840000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1598006701,"objectID":"0d3dde0b671aaa4defc3de962d5bb92f","permalink":"https://rahulnair23.github.io/publication/nair-2011-isttt/","publishdate":"2020-08-21T09:43:15.825073Z","relpermalink":"/publication/nair-2011-isttt/","section":"publication","summary":"","tags":[],"title":"A porous flow approach to modeling heterogeneous traffic in disordered systems","type":"publication"},{"authors":["Rahul Nair","Hani S Mahmassani","Elise Miller-Hooks"],"categories":[],"content":"","date":1293840000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1598006701,"objectID":"1281930376066565320c64eeade8f0c9","permalink":"https://rahulnair23.github.io/publication/nair-2011-porous/","publishdate":"2020-08-21T09:43:15.729844Z","relpermalink":"/publication/nair-2011-porous/","section":"publication","summary":"","tags":[],"title":"A porous flow approach to modeling heterogeneous traffic in disordered systems","type":"publication"},{"authors":["R. Nair","E. Miller-Hooks"],"categories":[],"content":"","date":1293840000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1598006701,"objectID":"ba44ba264ed5e1cdcdf9c381fd59bf65","permalink":"https://rahulnair23.github.io/publication/nair-2011-fleet/","publishdate":"2020-08-21T09:43:15.534537Z","relpermalink":"/publication/nair-2011-fleet/","section":"publication","summary":"","tags":[],"title":"Fleet management for vehicle sharing operations","type":"publication"},{"authors":["R. Nair"],"categories":[],"content":"","date":1262304000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1598006701,"objectID":"7f962f0ee904b663738067ede3725761","permalink":"https://rahulnair23.github.io/publication/nair-2010-design/","publishdate":"2020-08-21T09:43:16.685419Z","relpermalink":"/publication/nair-2010-design/","section":"publication","summary":"","tags":[],"title":"Design and Analysis of Vehicle Sharing Programs: A Systems Approach","type":"publication"},{"authors":["R. Nair","H. Avetisyan","E. Miller-Hooks"],"categories":[],"content":"","date":1262304000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1598006701,"objectID":"1b8451c824cc27d568d3124b23df981f","permalink":"https://rahulnair23.github.io/publication/nair-2010-resilience/","publishdate":"2020-08-21T09:43:16.591617Z","relpermalink":"/publication/nair-2010-resilience/","section":"publication","summary":"","tags":[],"title":"Resilience Framework for Ports and Other Intermodal Components","type":"publication"},{"authors":["R. Nair","E. Miller-Hooks"],"categories":[],"content":"","date":1230768000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1598006701,"objectID":"decf075a2f573c3ec49bd136a3db40dc","permalink":"https://rahulnair23.github.io/publication/nair-2009-evaluation/","publishdate":"2020-08-21T09:43:15.24628Z","relpermalink":"/publication/nair-2009-evaluation/","section":"publication","summary":"","tags":[],"title":"Evaluation of relocation strategies for emergency medical service vehicles","type":"publication"},{"authors":["E. Miller-Hooks","L.L. Chen","R. Nair","H.S. Mahmassani"],"categories":[],"content":"","date":1230768000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1598006701,"objectID":"f7827ea16d1763c13cae0c4e63fc8fab","permalink":"https://rahulnair23.github.io/publication/miller-2009-security/","publishdate":"2020-08-21T09:43:16.206041Z","relpermalink":"/publication/miller-2009-security/","section":"publication","summary":"","tags":[],"title":"Security and Mobility of Intermodal Freight Networks","type":"publication"},{"authors":["K. Zhang","R. Nair","H.S. Mahmassani","E.D. Miller-Hooks","V.C. Arcot","A. Kuo","J. Dong","C.C. Lu"],"categories":[],"content":"","date":1199145600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1598006701,"objectID":"f80952cf5a3bb599d44eaf639a1649a0","permalink":"https://rahulnair23.github.io/publication/zhang-2008-application/","publishdate":"2020-08-21T09:43:15.33964Z","relpermalink":"/publication/zhang-2008-application/","section":"publication","summary":"","tags":[],"title":"Application and Validation of Dynamic Freight Simulation-Assignment Model to Large-Scale Intermodal Rail Network: Pan-European Case","type":"publication"},{"authors":["R. Nair","E. Miller-Hooks"],"categories":[],"content":"","date":1199145600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1598006701,"objectID":"f7419abff3eb7ea6555be8dba98b90ac","permalink":"https://rahulnair23.github.io/publication/nair-2008-dynamic/","publishdate":"2020-08-21T09:43:16.498918Z","relpermalink":"/publication/nair-2008-dynamic/","section":"publication","summary":"","tags":[],"title":"Dynamic Relocation of Scarce Resources: The Case of Emergency Medical Service Vehicles in Montreal","type":"publication"},{"authors":["R. Nair","E.D. Miller-Hooks","H.S. Mahmassani","V.C. Arcot","A. Kuo","K. Zhang","A. Kozuki","J. Ludvigsen"],"categories":[],"content":"","date":1199145600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1598006701,"objectID":"fa73b36a50a7b7bd2e2801beed0c9ff8","permalink":"https://rahulnair23.github.io/publication/nair-2008-market/","publishdate":"2020-08-21T09:43:15.436508Z","relpermalink":"/publication/nair-2008-market/","section":"publication","summary":"","tags":[],"title":"Market potential for international rail-based intermodal services in Europe: From sea to shining sea","type":"publication"},{"authors":["E. Miller-Hooks","H.S. Mahmassani","R. Nair","K. Zhang","V.C. Arcot","A. Kuo","C.C. Lu","J. Dong","A. Kozuki","A. Consult"],"categories":[],"content":"","date":1167609600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1598006701,"objectID":"e87aba2a1cd350adda5d2c728fe4eb5b","permalink":"https://rahulnair23.github.io/publication/miller-2007-assessing/","publishdate":"2020-08-21T09:43:15.631765Z","relpermalink":"/publication/miller-2007-assessing/","section":"publication","summary":"","tags":[],"title":"Assessing Service Design Options and Strategies for Overcoming Barriers in the Reorient Intermodal Freight Transport Corridor","type":"publication"},{"authors":["VC Arcot","A. Caprara","C. D'Ambrosio","J. Dong","A. Kozuki","A. Kuo","CC Lu","H. Mahmassani","E. Malaguti","S. Martello"," others"],"categories":[],"content":"","date":1167609600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1598006701,"objectID":"39378600e79b37b6a1eeaee5fcac70da","permalink":"https://rahulnair23.github.io/publication/arcot-2007-modelling/","publishdate":"2020-08-21T09:43:15.149716Z","relpermalink":"/publication/arcot-2007-modelling/","section":"publication","summary":"","tags":[],"title":"Modelling corridor freight transport for demonstration of seamless international rail freight services","type":"publication"},{"authors":["R. Nair","W. Ressel","R. Sivanandan"],"categories":[],"content":"","date":1072915200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1598006701,"objectID":"be6f1b1ca79cc8836028c3ac224a1263","permalink":"https://rahulnair23.github.io/publication/nair-2004/","publishdate":"2020-08-21T09:43:14.37459Z","relpermalink":"/publication/nair-2004/","section":"publication","summary":"","tags":[],"title":"Application of floating car data using GIS for dynamic vehicular routing: A case study","type":"publication"}]